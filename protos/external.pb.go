// Copyright (c) 2018-2022 The MobileCoin Foundation

// MUST BE KEPT IN SYNC WITH RUST CODE!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.19.4
// source: external.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// A list of "known" token id's and their names.
///
/// Note that this is not an exhaustive list and clients should gracefully handle
/// the scenario that they receive a tx out with a token id they don't know about yet.
///
/// If changing this, please keep it in sync with the list defined in
/// mc-transaction-core in the tokens module.
type KnownTokenId int32

const (
	KnownTokenId_MOB KnownTokenId = 0
)

// Enum value maps for KnownTokenId.
var (
	KnownTokenId_name = map[int32]string{
		0: "MOB",
	}
	KnownTokenId_value = map[string]int32{
		"MOB": 0,
	}
)

func (x KnownTokenId) Enum() *KnownTokenId {
	p := new(KnownTokenId)
	*p = x
	return p
}

func (x KnownTokenId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnownTokenId) Descriptor() protoreflect.EnumDescriptor {
	return file_external_proto_enumTypes[0].Descriptor()
}

func (KnownTokenId) Type() protoreflect.EnumType {
	return &file_external_proto_enumTypes[0]
}

func (x KnownTokenId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KnownTokenId.Descriptor instead.
func (KnownTokenId) EnumDescriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{0}
}

/// A Ristretto private key.
type RistrettoPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RistrettoPrivate) Reset() {
	*x = RistrettoPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RistrettoPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RistrettoPrivate) ProtoMessage() {}

func (x *RistrettoPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RistrettoPrivate.ProtoReflect.Descriptor instead.
func (*RistrettoPrivate) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{0}
}

func (x *RistrettoPrivate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

/// A 32-byte compressed Ristretto curve point (public key)
type CompressedRistretto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CompressedRistretto) Reset() {
	*x = CompressedRistretto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressedRistretto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedRistretto) ProtoMessage() {}

func (x *CompressedRistretto) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedRistretto.ProtoReflect.Descriptor instead.
func (*CompressedRistretto) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{1}
}

func (x *CompressedRistretto) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

/// An Ed25519 public key, for validating signatures.
type Ed25519Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Ed25519Public) Reset() {
	*x = Ed25519Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ed25519Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ed25519Public) ProtoMessage() {}

func (x *Ed25519Public) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ed25519Public.ProtoReflect.Descriptor instead.
func (*Ed25519Public) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{2}
}

func (x *Ed25519Public) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

/// An Ed25519 signature object
type Ed25519Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Ed25519Signature) Reset() {
	*x = Ed25519Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ed25519Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ed25519Signature) ProtoMessage() {}

func (x *Ed25519Signature) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ed25519Signature.ProtoReflect.Descriptor instead.
func (*Ed25519Signature) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{3}
}

func (x *Ed25519Signature) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Ed25519MultiSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*Ed25519Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *Ed25519MultiSig) Reset() {
	*x = Ed25519MultiSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ed25519MultiSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ed25519MultiSig) ProtoMessage() {}

func (x *Ed25519MultiSig) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ed25519MultiSig.ProtoReflect.Descriptor instead.
func (*Ed25519MultiSig) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{4}
}

func (x *Ed25519MultiSig) GetSignatures() []*Ed25519Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type Ed25519SignerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signers   []*Ed25519Public `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	Threshold uint32           `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Ed25519SignerSet) Reset() {
	*x = Ed25519SignerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ed25519SignerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ed25519SignerSet) ProtoMessage() {}

func (x *Ed25519SignerSet) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ed25519SignerSet.ProtoReflect.Descriptor instead.
func (*Ed25519SignerSet) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{5}
}

func (x *Ed25519SignerSet) GetSigners() []*Ed25519Public {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *Ed25519SignerSet) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

/// Complete AccountKey, containing the pair of secret keys, which can be used
/// for spending, and optionally some Fog related info that is used to form
/// public addresses for accounts that sign up with Fog service.
///
/// This matches the Rust `transaction::AccountKey` struct.
type AccountKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Private key 'a' used for view-key matching.
	ViewPrivateKey *RistrettoPrivate `protobuf:"bytes,1,opt,name=view_private_key,json=viewPrivateKey,proto3" json:"view_private_key,omitempty"`
	/// Private key `b` used for spending.
	SpendPrivateKey *RistrettoPrivate `protobuf:"bytes,2,opt,name=spend_private_key,json=spendPrivateKey,proto3" json:"spend_private_key,omitempty"`
	/// Optional url of fog report server.
	/// Empty string when not in use, i.e. for accounts that don't have fog service.
	FogReportUrl string `protobuf:"bytes,3,opt,name=fog_report_url,json=fogReportUrl,proto3" json:"fog_report_url,omitempty"`
	/// Optional fog report id.
	/// The fog report server may serve multiple reports, this id disambiguates
	/// which one to use when sending to this account.
	FogReportId string `protobuf:"bytes,4,opt,name=fog_report_id,json=fogReportId,proto3" json:"fog_report_id,omitempty"`
	/// Optional fog authority subjectPublicKeyInfo.
	/// Empty when not in use.
	FogAuthoritySpki []byte `protobuf:"bytes,5,opt,name=fog_authority_spki,json=fogAuthoritySpki,proto3" json:"fog_authority_spki,omitempty"`
}

func (x *AccountKey) Reset() {
	*x = AccountKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountKey) ProtoMessage() {}

func (x *AccountKey) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountKey.ProtoReflect.Descriptor instead.
func (*AccountKey) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{6}
}

func (x *AccountKey) GetViewPrivateKey() *RistrettoPrivate {
	if x != nil {
		return x.ViewPrivateKey
	}
	return nil
}

func (x *AccountKey) GetSpendPrivateKey() *RistrettoPrivate {
	if x != nil {
		return x.SpendPrivateKey
	}
	return nil
}

func (x *AccountKey) GetFogReportUrl() string {
	if x != nil {
		return x.FogReportUrl
	}
	return ""
}

func (x *AccountKey) GetFogReportId() string {
	if x != nil {
		return x.FogReportId
	}
	return ""
}

func (x *AccountKey) GetFogAuthoritySpki() []byte {
	if x != nil {
		return x.FogAuthoritySpki
	}
	return nil
}

/// A public address, used to identify recipients.
type PublicAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// View public key
	ViewPublicKey *CompressedRistretto `protobuf:"bytes,1,opt,name=view_public_key,json=viewPublicKey,proto3" json:"view_public_key,omitempty"`
	/// Spend public key
	SpendPublicKey *CompressedRistretto `protobuf:"bytes,2,opt,name=spend_public_key,json=spendPublicKey,proto3" json:"spend_public_key,omitempty"`
	/// Optional url of fog report server.
	/// Empty string when not in use, i.e. for accounts that don't have fog service.
	/// Indicates the place at which the fog report server should be contacted.
	FogReportUrl string `protobuf:"bytes,3,opt,name=fog_report_url,json=fogReportUrl,proto3" json:"fog_report_url,omitempty"`
	/// Optional fog report id.
	/// The fog report server may serve multiple reports, this id disambiguates
	/// which one to use when sending to this account.
	FogReportId string `protobuf:"bytes,4,opt,name=fog_report_id,json=fogReportId,proto3" json:"fog_report_id,omitempty"`
	/// View key signature over the fog authority subjectPublicKeyInfo.
	///
	/// This must be parseable as a RistrettoSignature.
	FogAuthoritySig []byte `protobuf:"bytes,5,opt,name=fog_authority_sig,json=fogAuthoritySig,proto3" json:"fog_authority_sig,omitempty"`
}

func (x *PublicAddress) Reset() {
	*x = PublicAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicAddress) ProtoMessage() {}

func (x *PublicAddress) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicAddress.ProtoReflect.Descriptor instead.
func (*PublicAddress) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{7}
}

func (x *PublicAddress) GetViewPublicKey() *CompressedRistretto {
	if x != nil {
		return x.ViewPublicKey
	}
	return nil
}

func (x *PublicAddress) GetSpendPublicKey() *CompressedRistretto {
	if x != nil {
		return x.SpendPublicKey
	}
	return nil
}

func (x *PublicAddress) GetFogReportUrl() string {
	if x != nil {
		return x.FogReportUrl
	}
	return ""
}

func (x *PublicAddress) GetFogReportId() string {
	if x != nil {
		return x.FogReportId
	}
	return ""
}

func (x *PublicAddress) GetFogAuthoritySig() []byte {
	if x != nil {
		return x.FogAuthoritySig
	}
	return nil
}

/// A KDF can be used to stretch a 32 byte secret into multiple secret private keys.
/// The RootIdentity is a compact form of a user's account key, if it has been
/// derived in this way. This may be useful for e.g. paper wallets.
type RootIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The root entropy used to derive cryptonote private keys for this account
	RootEntropy *RootEntropy `protobuf:"bytes,1,opt,name=root_entropy,json=rootEntropy,proto3" json:"root_entropy,omitempty"`
	/// Optional url of fog report server, same as in AccountKey
	FogReportUrl string `protobuf:"bytes,2,opt,name=fog_report_url,json=fogReportUrl,proto3" json:"fog_report_url,omitempty"`
	/// Optional fog report id, same as in AccountKey
	FogReportId string `protobuf:"bytes,3,opt,name=fog_report_id,json=fogReportId,proto3" json:"fog_report_id,omitempty"`
	/// Optional fog authority subjectPublicKeyInfo.
	/// Empty when not in use.
	FogAuthoritySpki []byte `protobuf:"bytes,5,opt,name=fog_authority_spki,json=fogAuthoritySpki,proto3" json:"fog_authority_spki,omitempty"`
}

func (x *RootIdentity) Reset() {
	*x = RootIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootIdentity) ProtoMessage() {}

func (x *RootIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootIdentity.ProtoReflect.Descriptor instead.
func (*RootIdentity) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{8}
}

func (x *RootIdentity) GetRootEntropy() *RootEntropy {
	if x != nil {
		return x.RootEntropy
	}
	return nil
}

func (x *RootIdentity) GetFogReportUrl() string {
	if x != nil {
		return x.FogReportUrl
	}
	return ""
}

func (x *RootIdentity) GetFogReportId() string {
	if x != nil {
		return x.FogReportId
	}
	return ""
}

func (x *RootIdentity) GetFogAuthoritySpki() []byte {
	if x != nil {
		return x.FogAuthoritySpki
	}
	return nil
}

/// A 32 byte secret used as input key material to derive private keys
type RootEntropy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RootEntropy) Reset() {
	*x = RootEntropy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootEntropy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootEntropy) ProtoMessage() {}

func (x *RootEntropy) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootEntropy.ProtoReflect.Descriptor instead.
func (*RootEntropy) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{9}
}

func (x *RootEntropy) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

/// A 32-byte scalar associated to the ristretto group.
/// This is the same as RistrettoPrivate, but they are used in different places.
/// TODO: MC-1605 Consider to factor out this type, or just this proto message.
type CurveScalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CurveScalar) Reset() {
	*x = CurveScalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveScalar) ProtoMessage() {}

func (x *CurveScalar) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveScalar.ProtoReflect.Descriptor instead.
func (*CurveScalar) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{10}
}

func (x *CurveScalar) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

/// A 32-byte mobilecoin transaction key image.
type KeyImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KeyImage) Reset() {
	*x = KeyImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyImage) ProtoMessage() {}

func (x *KeyImage) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyImage.ProtoReflect.Descriptor instead.
func (*KeyImage) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{11}
}

func (x *KeyImage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{12}
}

func (x *Range) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Range) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TxOutMembershipHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TxOutMembershipHash) Reset() {
	*x = TxOutMembershipHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutMembershipHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutMembershipHash) ProtoMessage() {}

func (x *TxOutMembershipHash) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutMembershipHash.ProtoReflect.Descriptor instead.
func (*TxOutMembershipHash) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{13}
}

func (x *TxOutMembershipHash) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TxOutMembershipElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *Range               `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Hash  *TxOutMembershipHash `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TxOutMembershipElement) Reset() {
	*x = TxOutMembershipElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutMembershipElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutMembershipElement) ProtoMessage() {}

func (x *TxOutMembershipElement) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutMembershipElement.ProtoReflect.Descriptor instead.
func (*TxOutMembershipElement) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{14}
}

func (x *TxOutMembershipElement) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *TxOutMembershipElement) GetHash() *TxOutMembershipHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

type TxOutMembershipProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64                    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	HighestIndex uint64                    `protobuf:"varint,2,opt,name=highest_index,json=highestIndex,proto3" json:"highest_index,omitempty"`
	Elements     []*TxOutMembershipElement `protobuf:"bytes,3,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *TxOutMembershipProof) Reset() {
	*x = TxOutMembershipProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutMembershipProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutMembershipProof) ProtoMessage() {}

func (x *TxOutMembershipProof) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutMembershipProof.ProtoReflect.Descriptor instead.
func (*TxOutMembershipProof) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{15}
}

func (x *TxOutMembershipProof) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TxOutMembershipProof) GetHighestIndex() uint64 {
	if x != nil {
		return x.HighestIndex
	}
	return 0
}

func (x *TxOutMembershipProof) GetElements() []*TxOutMembershipElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

// A hash of the shared secret of a transaction output.
//
// Can be used by the recipient of a transaction output to verify that the
// bearer of this number knew the shared secret of the transaction output,
// thereby providing evidence that they are the sender.
type TxOutConfirmationNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TxOutConfirmationNumber) Reset() {
	*x = TxOutConfirmationNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutConfirmationNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutConfirmationNumber) ProtoMessage() {}

func (x *TxOutConfirmationNumber) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutConfirmationNumber.ProtoReflect.Descriptor instead.
func (*TxOutConfirmationNumber) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{16}
}

func (x *TxOutConfirmationNumber) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// MaskedAmount.
type MaskedAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Pedersen commitment `v*G + s*H`
	Commitment *CompressedRistretto `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// `masked_value = value XOR_8 Blake2B("value_mask" || shared_secret)`
	MaskedValue uint64 `protobuf:"fixed64,2,opt,name=masked_value,json=maskedValue,proto3" json:"masked_value,omitempty"`
	// `masked_token_id = token_id XOR_8 Blake2B("token_id_mask" || shared_secret)`
	MaskedTokenId []byte `protobuf:"bytes,3,opt,name=masked_token_id,json=maskedTokenId,proto3" json:"masked_token_id,omitempty"`
}

func (x *MaskedAmount) Reset() {
	*x = MaskedAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskedAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskedAmount) ProtoMessage() {}

func (x *MaskedAmount) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskedAmount.ProtoReflect.Descriptor instead.
func (*MaskedAmount) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{17}
}

func (x *MaskedAmount) GetCommitment() *CompressedRistretto {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *MaskedAmount) GetMaskedValue() uint64 {
	if x != nil {
		return x.MaskedValue
	}
	return 0
}

func (x *MaskedAmount) GetMaskedTokenId() []byte {
	if x != nil {
		return x.MaskedTokenId
	}
	return nil
}

// The bytes of encrypted fog hint
type EncryptedFogHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EncryptedFogHint) Reset() {
	*x = EncryptedFogHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedFogHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedFogHint) ProtoMessage() {}

func (x *EncryptedFogHint) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedFogHint.ProtoReflect.Descriptor instead.
func (*EncryptedFogHint) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{18}
}

func (x *EncryptedFogHint) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// The bytes of encrypted memo
type EncryptedMemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EncryptedMemo) Reset() {
	*x = EncryptedMemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedMemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMemo) ProtoMessage() {}

func (x *EncryptedMemo) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMemo.ProtoReflect.Descriptor instead.
func (*EncryptedMemo) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{19}
}

func (x *EncryptedMemo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A Transaction Output.
type TxOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount.
	MaskedAmount *MaskedAmount `protobuf:"bytes,1,opt,name=masked_amount,json=maskedAmount,proto3" json:"masked_amount,omitempty"`
	// Public key.
	TargetKey *CompressedRistretto `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	// Public key.
	PublicKey *CompressedRistretto `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Encrypted fog hint payload.
	// This is an mc-crypto-box cryptogram for the fog ingest server,
	// or a random cryptogram indistinguishable from a real one.
	EFogHint *EncryptedFogHint `protobuf:"bytes,4,opt,name=e_fog_hint,json=eFogHint,proto3" json:"e_fog_hint,omitempty"`
	// Encrypted memo
	EMemo *EncryptedMemo `protobuf:"bytes,5,opt,name=e_memo,json=eMemo,proto3" json:"e_memo,omitempty"`
}

func (x *TxOut) Reset() {
	*x = TxOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOut) ProtoMessage() {}

func (x *TxOut) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOut.ProtoReflect.Descriptor instead.
func (*TxOut) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{20}
}

func (x *TxOut) GetMaskedAmount() *MaskedAmount {
	if x != nil {
		return x.MaskedAmount
	}
	return nil
}

func (x *TxOut) GetTargetKey() *CompressedRistretto {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

func (x *TxOut) GetPublicKey() *CompressedRistretto {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *TxOut) GetEFogHint() *EncryptedFogHint {
	if x != nil {
		return x.EFogHint
	}
	return nil
}

func (x *TxOut) GetEMemo() *EncryptedMemo {
	if x != nil {
		return x.EMemo
	}
	return nil
}

type TxIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "Ring" of inputs, one of which is actually being spent.
	Ring []*TxOut `protobuf:"bytes,1,rep,name=ring,proto3" json:"ring,omitempty"`
	// Proof that each TxOut in `ring` is in the ledger.
	Proofs []*TxOutMembershipProof `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	// Any rules specified by the signed input
	InputRules *InputRules `protobuf:"bytes,3,opt,name=input_rules,json=inputRules,proto3" json:"input_rules,omitempty"`
}

func (x *TxIn) Reset() {
	*x = TxIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxIn) ProtoMessage() {}

func (x *TxIn) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxIn.ProtoReflect.Descriptor instead.
func (*TxIn) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{21}
}

func (x *TxIn) GetRing() []*TxOut {
	if x != nil {
		return x.Ring
	}
	return nil
}

func (x *TxIn) GetProofs() []*TxOutMembershipProof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *TxIn) GetInputRules() *InputRules {
	if x != nil {
		return x.InputRules
	}
	return nil
}

// Rules enforced on a transaction by a signed input within it (MCIP #31)
type InputRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Outputs required to appear in the TxPrefix for the Tx to be valid
	RequiredOutputs []*TxOut `protobuf:"bytes,1,rep,name=required_outputs,json=requiredOutputs,proto3" json:"required_outputs,omitempty"`
	// A maximum value which the tombstone block for the Tx cannot exceed
	//
	// A value of zero here means no limit is enforced
	MaxTombstoneBlock uint64 `protobuf:"fixed64,2,opt,name=max_tombstone_block,json=maxTombstoneBlock,proto3" json:"max_tombstone_block,omitempty"`
}

func (x *InputRules) Reset() {
	*x = InputRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputRules) ProtoMessage() {}

func (x *InputRules) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputRules.ProtoReflect.Descriptor instead.
func (*InputRules) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{22}
}

func (x *InputRules) GetRequiredOutputs() []*TxOut {
	if x != nil {
		return x.RequiredOutputs
	}
	return nil
}

func (x *InputRules) GetMaxTombstoneBlock() uint64 {
	if x != nil {
		return x.MaxTombstoneBlock
	}
	return 0
}

// A transaction that a client submits to consensus
type TxPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction inputs.
	Inputs []*TxIn `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Transaction outputs.
	Outputs []*TxOut `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Fee paid to the foundation for this transaction
	Fee uint64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// The block index at which this transaction is no longer valid.
	TombstoneBlock uint64 `protobuf:"varint,4,opt,name=tombstone_block,json=tombstoneBlock,proto3" json:"tombstone_block,omitempty"`
	// Token id for the fee of this transaction
	FeeTokenId uint64 `protobuf:"fixed64,5,opt,name=fee_token_id,json=feeTokenId,proto3" json:"fee_token_id,omitempty"`
}

func (x *TxPrefix) Reset() {
	*x = TxPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxPrefix) ProtoMessage() {}

func (x *TxPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxPrefix.ProtoReflect.Descriptor instead.
func (*TxPrefix) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{23}
}

func (x *TxPrefix) GetInputs() []*TxIn {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TxPrefix) GetOutputs() []*TxOut {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TxPrefix) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TxPrefix) GetTombstoneBlock() uint64 {
	if x != nil {
		return x.TombstoneBlock
	}
	return 0
}

func (x *TxPrefix) GetFeeTokenId() uint64 {
	if x != nil {
		return x.FeeTokenId
	}
	return 0
}

// A ring mlsag is a group-ring signature conferring spending authority of one TxOut
// which is part of a TxIn.
type RingMLSAG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The initial challenge value for the ring signature
	CZero *CurveScalar `protobuf:"bytes,1,opt,name=c_zero,json=cZero,proto3" json:"c_zero,omitempty"`
	// The "responses", one for each input which is signed
	Responses []*CurveScalar `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	// The key image is a hash unique to the "true" spent input. This cannot
	// be linked back to determine the true spent input, but the input cannot be
	// spent again without producing the same key image value, so this is used to
	// prevent double-spends.
	KeyImage *KeyImage `protobuf:"bytes,3,opt,name=key_image,json=keyImage,proto3" json:"key_image,omitempty"`
}

func (x *RingMLSAG) Reset() {
	*x = RingMLSAG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RingMLSAG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingMLSAG) ProtoMessage() {}

func (x *RingMLSAG) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingMLSAG.ProtoReflect.Descriptor instead.
func (*RingMLSAG) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{24}
}

func (x *RingMLSAG) GetCZero() *CurveScalar {
	if x != nil {
		return x.CZero
	}
	return nil
}

func (x *RingMLSAG) GetResponses() []*CurveScalar {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *RingMLSAG) GetKeyImage() *KeyImage {
	if x != nil {
		return x.KeyImage
	}
	return nil
}

type SignatureRctBulletproofs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A ring-signature, one for each TxIn, producing one pseudo-output and key image.
	RingSignatures []*RingMLSAG `protobuf:"bytes,1,rep,name=ring_signatures,json=ringSignatures,proto3" json:"ring_signatures,omitempty"`
	// The amount commitments for each pseudo-output.
	// There must be one of these for each TxIn.
	PseudoOutputCommitments []*CompressedRistretto `protobuf:"bytes,2,rep,name=pseudo_output_commitments,json=pseudoOutputCommitments,proto3" json:"pseudo_output_commitments,omitempty"`
	// Before mixed transactions feature, there is one range proof for all pseudo-output
	// and output commitments, whose serialized bytes appear here.
	// After mixed transactions feature, this field is empty.
	RangeProofBytes []byte `protobuf:"bytes,3,opt,name=range_proof_bytes,json=rangeProofBytes,proto3" json:"range_proof_bytes,omitempty"`
	// Before mixed transactions feature, this field is empty.
	// After mixed transactions feature, this field contains one range proof for each
	// token id which appears in the transaction, in sorted order of token ids.
	// It range-proofs the pseudo-outputs and outputs with that token id, in the order
	// that they appear in the transaction.
	RangeProofs [][]byte `protobuf:"bytes,4,rep,name=range_proofs,json=rangeProofs,proto3" json:"range_proofs,omitempty"`
	// The token ids of each pseudo ouptut. There must be one of these for each TxIn.
	// Before mixed transactions feature, this field is empty, and the token ids of
	// all pseudo-outputs are inferred from the tx.prefix.fee_token_id.
	PseudoOutputTokenIds []uint64 `protobuf:"fixed64,5,rep,packed,name=pseudo_output_token_ids,json=pseudoOutputTokenIds,proto3" json:"pseudo_output_token_ids,omitempty"`
	// The token ids of each output. There must be one of these for each output of the Tx.
	// (tx.prefix.outputs).
	// Before mixed transactions feature, this field is empty, and the token ids of
	// all outputs are inferred from the tx.prefix.fee_token_id.
	OutputTokenIds []uint64 `protobuf:"fixed64,6,rep,packed,name=output_token_ids,json=outputTokenIds,proto3" json:"output_token_ids,omitempty"`
}

func (x *SignatureRctBulletproofs) Reset() {
	*x = SignatureRctBulletproofs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureRctBulletproofs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureRctBulletproofs) ProtoMessage() {}

func (x *SignatureRctBulletproofs) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureRctBulletproofs.ProtoReflect.Descriptor instead.
func (*SignatureRctBulletproofs) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{25}
}

func (x *SignatureRctBulletproofs) GetRingSignatures() []*RingMLSAG {
	if x != nil {
		return x.RingSignatures
	}
	return nil
}

func (x *SignatureRctBulletproofs) GetPseudoOutputCommitments() []*CompressedRistretto {
	if x != nil {
		return x.PseudoOutputCommitments
	}
	return nil
}

func (x *SignatureRctBulletproofs) GetRangeProofBytes() []byte {
	if x != nil {
		return x.RangeProofBytes
	}
	return nil
}

func (x *SignatureRctBulletproofs) GetRangeProofs() [][]byte {
	if x != nil {
		return x.RangeProofs
	}
	return nil
}

func (x *SignatureRctBulletproofs) GetPseudoOutputTokenIds() []uint64 {
	if x != nil {
		return x.PseudoOutputTokenIds
	}
	return nil
}

func (x *SignatureRctBulletproofs) GetOutputTokenIds() []uint64 {
	if x != nil {
		return x.OutputTokenIds
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual contents of the transaction.
	Prefix *TxPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The RingCT signature on the prefix.
	Signature *SignatureRctBulletproofs `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{26}
}

func (x *Tx) GetPrefix() *TxPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Tx) GetSignature() *SignatureRctBulletproofs {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TxHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of a single transaction.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TxHash) Reset() {
	*x = TxHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxHash) ProtoMessage() {}

func (x *TxHash) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxHash.ProtoReflect.Descriptor instead.
func (*TxHash) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{27}
}

func (x *TxHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// Given to the recipient of a transaction output by the sender so that the
// recipient may verify that the other party is indeed the sender.
//
// Often given to the recipient before the transaction is finalized so that
// the recipient may know to anticipate the arrival of a transaction output,
// as well as know who it's from, when to consider it as having surpassed
// the tombstone block, and the expected amount of the output.
type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key of the TxOut.
	PublicKey *CompressedRistretto `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Confirmation number of the TxOut.
	Confirmation *TxOutConfirmationNumber `protobuf:"bytes,2,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	// Tombstone block of the Tx that produced the TxOut.
	// Note: This value is self-reported by the sender and is unverifiable.
	TombstoneBlock uint64 `protobuf:"varint,3,opt,name=tombstone_block,json=tombstoneBlock,proto3" json:"tombstone_block,omitempty"`
	// Amount of the TxOut.
	// Note: This value is self-reported by the sender and is unverifiable.
	MaskedAmount *MaskedAmount `protobuf:"bytes,4,opt,name=masked_amount,json=maskedAmount,proto3" json:"masked_amount,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{28}
}

func (x *Receipt) GetPublicKey() *CompressedRistretto {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Receipt) GetConfirmation() *TxOutConfirmationNumber {
	if x != nil {
		return x.Confirmation
	}
	return nil
}

func (x *Receipt) GetTombstoneBlock() uint64 {
	if x != nil {
		return x.TombstoneBlock
	}
	return 0
}

func (x *Receipt) GetMaskedAmount() *MaskedAmount {
	if x != nil {
		return x.MaskedAmount
	}
	return nil
}

/// The signature over an IAS JSON reponse, created by Intel
type VerificationSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *VerificationSignature) Reset() {
	*x = VerificationSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationSignature) ProtoMessage() {}

func (x *VerificationSignature) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationSignature.ProtoReflect.Descriptor instead.
func (*VerificationSignature) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{29}
}

func (x *VerificationSignature) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

/// The IAS verification report response encoded as a protocol buffer
type VerificationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The IAS-generated signature over the response string
	Sig *VerificationSignature `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	/// A list of byte strings representing the DER-encoded certificate
	/// chain provided by IAS.
	Chain [][]byte `protobuf:"bytes,2,rep,name=chain,proto3" json:"chain,omitempty"`
	/// The raw report body JSON, as a byte sequence
	HttpBody string `protobuf:"bytes,3,opt,name=http_body,json=httpBody,proto3" json:"http_body,omitempty"`
}

func (x *VerificationReport) Reset() {
	*x = VerificationReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationReport) ProtoMessage() {}

func (x *VerificationReport) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationReport.ProtoReflect.Descriptor instead.
func (*VerificationReport) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{30}
}

func (x *VerificationReport) GetSig() *VerificationSignature {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *VerificationReport) GetChain() [][]byte {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *VerificationReport) GetHttpBody() string {
	if x != nil {
		return x.HttpBody
	}
	return ""
}

/// The contents of a mint-tx, which is a transaction to mint new tokens.
type MintTxPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Token ID we are minting.
	TokenId uint64 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	/// Amount we are minting.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	/// The destination's public subaddress view key 'C'.
	ViewPublicKey *CompressedRistretto `protobuf:"bytes,3,opt,name=view_public_key,json=viewPublicKey,proto3" json:"view_public_key,omitempty"`
	/// The destination's public subaddress spend key `D`.
	SpendPublicKey *CompressedRistretto `protobuf:"bytes,4,opt,name=spend_public_key,json=spendPublicKey,proto3" json:"spend_public_key,omitempty"`
	/// Nonce, to prevent replay attacks.
	/// Must be exactly 64 bytes long (see constant constants::NONCE_LENGTH).
	Nonce []byte `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	/// The block index at which this transaction is no longer valid.
	TombstoneBlock uint64 `protobuf:"varint,6,opt,name=tombstone_block,json=tombstoneBlock,proto3" json:"tombstone_block,omitempty"`
}

func (x *MintTxPrefix) Reset() {
	*x = MintTxPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTxPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTxPrefix) ProtoMessage() {}

func (x *MintTxPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTxPrefix.ProtoReflect.Descriptor instead.
func (*MintTxPrefix) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{31}
}

func (x *MintTxPrefix) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *MintTxPrefix) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintTxPrefix) GetViewPublicKey() *CompressedRistretto {
	if x != nil {
		return x.ViewPublicKey
	}
	return nil
}

func (x *MintTxPrefix) GetSpendPublicKey() *CompressedRistretto {
	if x != nil {
		return x.SpendPublicKey
	}
	return nil
}

func (x *MintTxPrefix) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *MintTxPrefix) GetTombstoneBlock() uint64 {
	if x != nil {
		return x.TombstoneBlock
	}
	return 0
}

/// A mint transaction coupled with a signature over it.
type MintTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix    *MintTxPrefix    `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Signature *Ed25519MultiSig `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MintTx) Reset() {
	*x = MintTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTx) ProtoMessage() {}

func (x *MintTx) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTx.ProtoReflect.Descriptor instead.
func (*MintTx) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{32}
}

func (x *MintTx) GetPrefix() *MintTxPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *MintTx) GetSignature() *Ed25519MultiSig {
	if x != nil {
		return x.Signature
	}
	return nil
}

/// A minting configuration for a single token ID.
/// The minting configuration specifies who is allowed to submit mint
/// transactions, for which token and at what total limit.
type MintConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Token ID this configuration applies to.
	TokenId uint64 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	/// The set of keys that can sign a minting transaction.
	SignerSet *Ed25519SignerSet `protobuf:"bytes,2,opt,name=signer_set,json=signerSet,proto3" json:"signer_set,omitempty"`
	/// The maximal amount this configuration can mint from the moment it has
	/// been applied.
	MintLimit uint64 `protobuf:"varint,3,opt,name=mint_limit,json=mintLimit,proto3" json:"mint_limit,omitempty"`
}

func (x *MintConfig) Reset() {
	*x = MintConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintConfig) ProtoMessage() {}

func (x *MintConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintConfig.ProtoReflect.Descriptor instead.
func (*MintConfig) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{33}
}

func (x *MintConfig) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *MintConfig) GetSignerSet() *Ed25519SignerSet {
	if x != nil {
		return x.SignerSet
	}
	return nil
}

func (x *MintConfig) GetMintLimit() uint64 {
	if x != nil {
		return x.MintLimit
	}
	return 0
}

/// The contents of a mint-config transaction. This transaction alters the
/// minting configuration for a single token ID.
type MintConfigTxPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Token ID we are replacing the configuration set for.
	TokenId uint64 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	/// The new configuration.
	Configs []*MintConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
	/// Nonce, to prevent replay attacks.
	/// Must be exactly 64 bytes long (see constant constants::NONCE_LENGTH).
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	/// The block index at which this transaction is no longer valid.
	TombstoneBlock uint64 `protobuf:"varint,4,opt,name=tombstone_block,json=tombstoneBlock,proto3" json:"tombstone_block,omitempty"`
	/// The maximal amount that can be minted by configurations specified in
	/// this tx. This amount is shared amongst all configs.
	TotalMintLimit uint64 `protobuf:"varint,5,opt,name=total_mint_limit,json=totalMintLimit,proto3" json:"total_mint_limit,omitempty"`
}

func (x *MintConfigTxPrefix) Reset() {
	*x = MintConfigTxPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintConfigTxPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintConfigTxPrefix) ProtoMessage() {}

func (x *MintConfigTxPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintConfigTxPrefix.ProtoReflect.Descriptor instead.
func (*MintConfigTxPrefix) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{34}
}

func (x *MintConfigTxPrefix) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *MintConfigTxPrefix) GetConfigs() []*MintConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *MintConfigTxPrefix) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *MintConfigTxPrefix) GetTombstoneBlock() uint64 {
	if x != nil {
		return x.TombstoneBlock
	}
	return 0
}

func (x *MintConfigTxPrefix) GetTotalMintLimit() uint64 {
	if x != nil {
		return x.TotalMintLimit
	}
	return 0
}

/// A mint-config transaction coupled with a signature over it.
type MintConfigTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix    *MintConfigTxPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Signature *Ed25519MultiSig    `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MintConfigTx) Reset() {
	*x = MintConfigTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintConfigTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintConfigTx) ProtoMessage() {}

func (x *MintConfigTx) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintConfigTx.ProtoReflect.Descriptor instead.
func (*MintConfigTx) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{35}
}

func (x *MintConfigTx) GetPrefix() *MintConfigTxPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *MintConfigTx) GetSignature() *Ed25519MultiSig {
	if x != nil {
		return x.Signature
	}
	return nil
}

/// A mint-config transaction coupled with the data used to validate it.
type ValidatedMintConfigTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MintConfigTx *MintConfigTx     `protobuf:"bytes,1,opt,name=mint_config_tx,json=mintConfigTx,proto3" json:"mint_config_tx,omitempty"`
	SignerSet    *Ed25519SignerSet `protobuf:"bytes,2,opt,name=signer_set,json=signerSet,proto3" json:"signer_set,omitempty"`
}

func (x *ValidatedMintConfigTx) Reset() {
	*x = ValidatedMintConfigTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatedMintConfigTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatedMintConfigTx) ProtoMessage() {}

func (x *ValidatedMintConfigTx) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatedMintConfigTx.ProtoReflect.Descriptor instead.
func (*ValidatedMintConfigTx) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{36}
}

func (x *ValidatedMintConfigTx) GetMintConfigTx() *MintConfigTx {
	if x != nil {
		return x.MintConfigTx
	}
	return nil
}

func (x *ValidatedMintConfigTx) GetSignerSet() *Ed25519SignerSet {
	if x != nil {
		return x.SignerSet
	}
	return nil
}

// The amount and blinding factor of a TxOut
type UnmaskedAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the amount commitment
	Value uint64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The token_id of the amount commitment
	TokenId uint64 `protobuf:"fixed64,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The blinding factor of the amount commitment
	Blinding *CurveScalar `protobuf:"bytes,3,opt,name=blinding,proto3" json:"blinding,omitempty"`
}

func (x *UnmaskedAmount) Reset() {
	*x = UnmaskedAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmaskedAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmaskedAmount) ProtoMessage() {}

func (x *UnmaskedAmount) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmaskedAmount.ProtoReflect.Descriptor instead.
func (*UnmaskedAmount) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{37}
}

func (x *UnmaskedAmount) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnmaskedAmount) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *UnmaskedAmount) GetBlinding() *CurveScalar {
	if x != nil {
		return x.Blinding
	}
	return nil
}

// A pre-signed transaction input with associated rules, as described in MCIP #31
type SignedContingentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block version rules used when making this signature
	BlockVersion uint32 `protobuf:"varint,1,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	// The tx_in which was signed
	TxIn *TxIn `protobuf:"bytes,2,opt,name=tx_in,json=txIn,proto3" json:"tx_in,omitempty"`
	// The Ring MLSAG signature, conferring spending authority
	Mlsag *RingMLSAG `protobuf:"bytes,3,opt,name=mlsag,proto3" json:"mlsag,omitempty"`
	// The amount and blinding of the pseudo-output of the MLSAG
	PseudoOutputAmount *UnmaskedAmount `protobuf:"bytes,4,opt,name=pseudo_output_amount,json=pseudoOutputAmount,proto3" json:"pseudo_output_amount,omitempty"`
	/// The amount and blinding of any TxOut required by the input rules
	RequiredOutputAmounts []*UnmaskedAmount `protobuf:"bytes,5,rep,name=required_output_amounts,json=requiredOutputAmounts,proto3" json:"required_output_amounts,omitempty"`
	/// The tx_out global index of each ring member
	/// This helps the recipient of this payload construct proofs of membership for the ring
	TxOutGlobalIndices []uint64 `protobuf:"fixed64,6,rep,packed,name=tx_out_global_indices,json=txOutGlobalIndices,proto3" json:"tx_out_global_indices,omitempty"`
}

func (x *SignedContingentInput) Reset() {
	*x = SignedContingentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedContingentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedContingentInput) ProtoMessage() {}

func (x *SignedContingentInput) ProtoReflect() protoreflect.Message {
	mi := &file_external_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedContingentInput.ProtoReflect.Descriptor instead.
func (*SignedContingentInput) Descriptor() ([]byte, []int) {
	return file_external_proto_rawDescGZIP(), []int{38}
}

func (x *SignedContingentInput) GetBlockVersion() uint32 {
	if x != nil {
		return x.BlockVersion
	}
	return 0
}

func (x *SignedContingentInput) GetTxIn() *TxIn {
	if x != nil {
		return x.TxIn
	}
	return nil
}

func (x *SignedContingentInput) GetMlsag() *RingMLSAG {
	if x != nil {
		return x.Mlsag
	}
	return nil
}

func (x *SignedContingentInput) GetPseudoOutputAmount() *UnmaskedAmount {
	if x != nil {
		return x.PseudoOutputAmount
	}
	return nil
}

func (x *SignedContingentInput) GetRequiredOutputAmounts() []*UnmaskedAmount {
	if x != nil {
		return x.RequiredOutputAmounts
	}
	return nil
}

func (x *SignedContingentInput) GetTxOutGlobalIndices() []uint64 {
	if x != nil {
		return x.TxOutGlobalIndices
	}
	return nil
}

var File_external_proto protoreflect.FileDescriptor

var file_external_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x69,
	0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a,
	0x0d, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x26, 0x0a, 0x10, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x0f, 0x45, 0x64,
	0x32, 0x35, 0x35, 0x31, 0x39, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x10, 0x45, 0x64, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x31, 0x0a,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x92,
	0x02, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a,
	0x10, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65,
	0x74, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x67, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x67, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x6b, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x66, 0x6f, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x70, 0x6b, 0x69, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0d, 0x76,
	0x69, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74,
	0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x66, 0x6f, 0x67, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x0c,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0c,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x6f,
	0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x67, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x70, 0x6b, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x66, 0x6f,
	0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x70, 0x6b, 0x69, 0x22, 0x21,
	0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x21, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74,
	0x6f, 0x22, 0x29, 0x0a, 0x13, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x16,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x8f, 0x01, 0x0a, 0x14, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74,
	0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x10,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x67, 0x48, 0x69, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x02, 0x0a, 0x05, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65,
	0x74, 0x74, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74,
	0x6f, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0a,
	0x65, 0x5f, 0x66, 0x6f, 0x67, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x46,
	0x6f, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x52,
	0x05, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x6e, 0x12,
	0x23, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x04,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x35, 0x0a, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54,
	0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xba, 0x01,
	0x0a, 0x08, 0x54, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a,
	0x66, 0x65, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x52,
	0x69, 0x6e, 0x67, 0x4d, 0x4c, 0x53, 0x41, 0x47, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52,
	0x05, 0x63, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x02, 0x0a,
	0x18, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x63, 0x74, 0x42, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x69,
	0x6e, 0x67, 0x4d, 0x4c, 0x53, 0x41, 0x47, 0x52, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x19, 0x70, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x17, 0x70, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x73, 0x22, 0x72, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x63, 0x74, 0x42,
	0x75, 0x6c, 0x6c, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0xf4, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65,
	0x74, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x45,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b,
	0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x15, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x7a, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x90, 0x02, 0x0a,
	0x0c, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52,
	0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x71, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x7d, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x78, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x90, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x78, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x78, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x78, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x22, 0x74, 0x0a, 0x0e, 0x55, 0x6e, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52,
	0x08, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x52, 0x04, 0x74, 0x78, 0x49, 0x6e, 0x12, 0x29, 0x0a,
	0x05, 0x6d, 0x6c, 0x73, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x4c, 0x53, 0x41,
	0x47, 0x52, 0x05, 0x6d, 0x6c, 0x73, 0x61, 0x67, 0x12, 0x4a, 0x0a, 0x14, 0x70, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x12, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x06, 0x52, 0x12, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2a, 0x17, 0x0a, 0x0c, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x42,
	0x10, 0x00, 0x42, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0d, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x41, 0x50, 0x49, 0x5a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_proto_rawDescOnce sync.Once
	file_external_proto_rawDescData = file_external_proto_rawDesc
)

func file_external_proto_rawDescGZIP() []byte {
	file_external_proto_rawDescOnce.Do(func() {
		file_external_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_proto_rawDescData)
	})
	return file_external_proto_rawDescData
}

var file_external_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_external_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_external_proto_goTypes = []interface{}{
	(KnownTokenId)(0),                // 0: external.KnownTokenId
	(*RistrettoPrivate)(nil),         // 1: external.RistrettoPrivate
	(*CompressedRistretto)(nil),      // 2: external.CompressedRistretto
	(*Ed25519Public)(nil),            // 3: external.Ed25519Public
	(*Ed25519Signature)(nil),         // 4: external.Ed25519Signature
	(*Ed25519MultiSig)(nil),          // 5: external.Ed25519MultiSig
	(*Ed25519SignerSet)(nil),         // 6: external.Ed25519SignerSet
	(*AccountKey)(nil),               // 7: external.AccountKey
	(*PublicAddress)(nil),            // 8: external.PublicAddress
	(*RootIdentity)(nil),             // 9: external.RootIdentity
	(*RootEntropy)(nil),              // 10: external.RootEntropy
	(*CurveScalar)(nil),              // 11: external.CurveScalar
	(*KeyImage)(nil),                 // 12: external.KeyImage
	(*Range)(nil),                    // 13: external.Range
	(*TxOutMembershipHash)(nil),      // 14: external.TxOutMembershipHash
	(*TxOutMembershipElement)(nil),   // 15: external.TxOutMembershipElement
	(*TxOutMembershipProof)(nil),     // 16: external.TxOutMembershipProof
	(*TxOutConfirmationNumber)(nil),  // 17: external.TxOutConfirmationNumber
	(*MaskedAmount)(nil),             // 18: external.MaskedAmount
	(*EncryptedFogHint)(nil),         // 19: external.EncryptedFogHint
	(*EncryptedMemo)(nil),            // 20: external.EncryptedMemo
	(*TxOut)(nil),                    // 21: external.TxOut
	(*TxIn)(nil),                     // 22: external.TxIn
	(*InputRules)(nil),               // 23: external.InputRules
	(*TxPrefix)(nil),                 // 24: external.TxPrefix
	(*RingMLSAG)(nil),                // 25: external.RingMLSAG
	(*SignatureRctBulletproofs)(nil), // 26: external.SignatureRctBulletproofs
	(*Tx)(nil),                       // 27: external.Tx
	(*TxHash)(nil),                   // 28: external.TxHash
	(*Receipt)(nil),                  // 29: external.Receipt
	(*VerificationSignature)(nil),    // 30: external.VerificationSignature
	(*VerificationReport)(nil),       // 31: external.VerificationReport
	(*MintTxPrefix)(nil),             // 32: external.MintTxPrefix
	(*MintTx)(nil),                   // 33: external.MintTx
	(*MintConfig)(nil),               // 34: external.MintConfig
	(*MintConfigTxPrefix)(nil),       // 35: external.MintConfigTxPrefix
	(*MintConfigTx)(nil),             // 36: external.MintConfigTx
	(*ValidatedMintConfigTx)(nil),    // 37: external.ValidatedMintConfigTx
	(*UnmaskedAmount)(nil),           // 38: external.UnmaskedAmount
	(*SignedContingentInput)(nil),    // 39: external.SignedContingentInput
}
var file_external_proto_depIdxs = []int32{
	4,  // 0: external.Ed25519MultiSig.signatures:type_name -> external.Ed25519Signature
	3,  // 1: external.Ed25519SignerSet.signers:type_name -> external.Ed25519Public
	1,  // 2: external.AccountKey.view_private_key:type_name -> external.RistrettoPrivate
	1,  // 3: external.AccountKey.spend_private_key:type_name -> external.RistrettoPrivate
	2,  // 4: external.PublicAddress.view_public_key:type_name -> external.CompressedRistretto
	2,  // 5: external.PublicAddress.spend_public_key:type_name -> external.CompressedRistretto
	10, // 6: external.RootIdentity.root_entropy:type_name -> external.RootEntropy
	13, // 7: external.TxOutMembershipElement.range:type_name -> external.Range
	14, // 8: external.TxOutMembershipElement.hash:type_name -> external.TxOutMembershipHash
	15, // 9: external.TxOutMembershipProof.elements:type_name -> external.TxOutMembershipElement
	2,  // 10: external.MaskedAmount.commitment:type_name -> external.CompressedRistretto
	18, // 11: external.TxOut.masked_amount:type_name -> external.MaskedAmount
	2,  // 12: external.TxOut.target_key:type_name -> external.CompressedRistretto
	2,  // 13: external.TxOut.public_key:type_name -> external.CompressedRistretto
	19, // 14: external.TxOut.e_fog_hint:type_name -> external.EncryptedFogHint
	20, // 15: external.TxOut.e_memo:type_name -> external.EncryptedMemo
	21, // 16: external.TxIn.ring:type_name -> external.TxOut
	16, // 17: external.TxIn.proofs:type_name -> external.TxOutMembershipProof
	23, // 18: external.TxIn.input_rules:type_name -> external.InputRules
	21, // 19: external.InputRules.required_outputs:type_name -> external.TxOut
	22, // 20: external.TxPrefix.inputs:type_name -> external.TxIn
	21, // 21: external.TxPrefix.outputs:type_name -> external.TxOut
	11, // 22: external.RingMLSAG.c_zero:type_name -> external.CurveScalar
	11, // 23: external.RingMLSAG.responses:type_name -> external.CurveScalar
	12, // 24: external.RingMLSAG.key_image:type_name -> external.KeyImage
	25, // 25: external.SignatureRctBulletproofs.ring_signatures:type_name -> external.RingMLSAG
	2,  // 26: external.SignatureRctBulletproofs.pseudo_output_commitments:type_name -> external.CompressedRistretto
	24, // 27: external.Tx.prefix:type_name -> external.TxPrefix
	26, // 28: external.Tx.signature:type_name -> external.SignatureRctBulletproofs
	2,  // 29: external.Receipt.public_key:type_name -> external.CompressedRistretto
	17, // 30: external.Receipt.confirmation:type_name -> external.TxOutConfirmationNumber
	18, // 31: external.Receipt.masked_amount:type_name -> external.MaskedAmount
	30, // 32: external.VerificationReport.sig:type_name -> external.VerificationSignature
	2,  // 33: external.MintTxPrefix.view_public_key:type_name -> external.CompressedRistretto
	2,  // 34: external.MintTxPrefix.spend_public_key:type_name -> external.CompressedRistretto
	32, // 35: external.MintTx.prefix:type_name -> external.MintTxPrefix
	5,  // 36: external.MintTx.signature:type_name -> external.Ed25519MultiSig
	6,  // 37: external.MintConfig.signer_set:type_name -> external.Ed25519SignerSet
	34, // 38: external.MintConfigTxPrefix.configs:type_name -> external.MintConfig
	35, // 39: external.MintConfigTx.prefix:type_name -> external.MintConfigTxPrefix
	5,  // 40: external.MintConfigTx.signature:type_name -> external.Ed25519MultiSig
	36, // 41: external.ValidatedMintConfigTx.mint_config_tx:type_name -> external.MintConfigTx
	6,  // 42: external.ValidatedMintConfigTx.signer_set:type_name -> external.Ed25519SignerSet
	11, // 43: external.UnmaskedAmount.blinding:type_name -> external.CurveScalar
	22, // 44: external.SignedContingentInput.tx_in:type_name -> external.TxIn
	25, // 45: external.SignedContingentInput.mlsag:type_name -> external.RingMLSAG
	38, // 46: external.SignedContingentInput.pseudo_output_amount:type_name -> external.UnmaskedAmount
	38, // 47: external.SignedContingentInput.required_output_amounts:type_name -> external.UnmaskedAmount
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_external_proto_init() }
func file_external_proto_init() {
	if File_external_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RistrettoPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressedRistretto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ed25519Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ed25519Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ed25519MultiSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ed25519SignerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootEntropy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveScalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutMembershipHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutMembershipElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutMembershipProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutConfirmationNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskedAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedFogHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedMemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RingMLSAG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureRctBulletproofs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTxPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintConfigTxPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintConfigTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatedMintConfigTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmaskedAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedContingentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_external_proto_goTypes,
		DependencyIndexes: file_external_proto_depIdxs,
		EnumInfos:         file_external_proto_enumTypes,
		MessageInfos:      file_external_proto_msgTypes,
	}.Build()
	File_external_proto = out.File
	file_external_proto_rawDesc = nil
	file_external_proto_goTypes = nil
	file_external_proto_depIdxs = nil
}
