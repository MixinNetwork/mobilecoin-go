// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package block

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MobilecoindAPIClient is the client API for MobilecoindAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MobilecoindAPIClient interface {
	// Monitors
	AddMonitor(ctx context.Context, in *AddMonitorRequest, opts ...grpc.CallOption) (*AddMonitorResponse, error)
	RemoveMonitor(ctx context.Context, in *RemoveMonitorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMonitorList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMonitorListResponse, error)
	GetMonitorStatus(ctx context.Context, in *GetMonitorStatusRequest, opts ...grpc.CallOption) (*GetMonitorStatusResponse, error)
	GetUnspentTxOutList(ctx context.Context, in *GetUnspentTxOutListRequest, opts ...grpc.CallOption) (*GetUnspentTxOutListResponse, error)
	// Utilities
	GenerateRootEntropy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateRootEntropyResponse, error)
	GenerateMnemonic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateMnemonicResponse, error)
	GetAccountKeyFromRootEntropy(ctx context.Context, in *GetAccountKeyFromRootEntropyRequest, opts ...grpc.CallOption) (*GetAccountKeyResponse, error)
	GetAccountKeyFromMnemonic(ctx context.Context, in *GetAccountKeyFromMnemonicRequest, opts ...grpc.CallOption) (*GetAccountKeyResponse, error)
	GetPublicAddress(ctx context.Context, in *GetPublicAddressRequest, opts ...grpc.CallOption) (*GetPublicAddressResponse, error)
	// b58 Codes
	ParseRequestCode(ctx context.Context, in *ParseRequestCodeRequest, opts ...grpc.CallOption) (*ParseRequestCodeResponse, error)
	CreateRequestCode(ctx context.Context, in *CreateRequestCodeRequest, opts ...grpc.CallOption) (*CreateRequestCodeResponse, error)
	ParseTransferCode(ctx context.Context, in *ParseTransferCodeRequest, opts ...grpc.CallOption) (*ParseTransferCodeResponse, error)
	CreateTransferCode(ctx context.Context, in *CreateTransferCodeRequest, opts ...grpc.CallOption) (*CreateTransferCodeResponse, error)
	ParseAddressCode(ctx context.Context, in *ParseAddressCodeRequest, opts ...grpc.CallOption) (*ParseAddressCodeResponse, error)
	CreateAddressCode(ctx context.Context, in *CreateAddressCodeRequest, opts ...grpc.CallOption) (*CreateAddressCodeResponse, error)
	// Txs
	GetMixins(ctx context.Context, in *GetMixinsRequest, opts ...grpc.CallOption) (*GetMixinsResponse, error)
	GetMembershipProofs(ctx context.Context, in *GetMembershipProofsRequest, opts ...grpc.CallOption) (*GetMembershipProofsResponse, error)
	GenerateTx(ctx context.Context, in *GenerateTxRequest, opts ...grpc.CallOption) (*GenerateTxResponse, error)
	GenerateOptimizationTx(ctx context.Context, in *GenerateOptimizationTxRequest, opts ...grpc.CallOption) (*GenerateOptimizationTxResponse, error)
	GenerateTransferCodeTx(ctx context.Context, in *GenerateTransferCodeTxRequest, opts ...grpc.CallOption) (*GenerateTransferCodeTxResponse, error)
	GenerateTxFromTxOutList(ctx context.Context, in *GenerateTxFromTxOutListRequest, opts ...grpc.CallOption) (*GenerateTxFromTxOutListResponse, error)
	SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error)
	// Databases
	GetLedgerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLedgerInfoResponse, error)
	GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetTxStatusAsSender(ctx context.Context, in *SubmitTxResponse, opts ...grpc.CallOption) (*GetTxStatusAsSenderResponse, error)
	GetTxStatusAsReceiver(ctx context.Context, in *GetTxStatusAsReceiverRequest, opts ...grpc.CallOption) (*GetTxStatusAsReceiverResponse, error)
	GetProcessedBlock(ctx context.Context, in *GetProcessedBlockRequest, opts ...grpc.CallOption) (*GetProcessedBlockResponse, error)
	GetBlockIndexByTxPubKey(ctx context.Context, in *GetBlockIndexByTxPubKeyRequest, opts ...grpc.CallOption) (*GetBlockIndexByTxPubKeyResponse, error)
	// Convenience calls
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error)
	PayAddressCode(ctx context.Context, in *PayAddressCodeRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error)
	// Network status
	GetNetworkStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNetworkStatusResponse, error)
	// Database encryption
	SetDbPassword(ctx context.Context, in *SetDbPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlockDb(ctx context.Context, in *UnlockDbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mobilecoindAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMobilecoindAPIClient(cc grpc.ClientConnInterface) MobilecoindAPIClient {
	return &mobilecoindAPIClient{cc}
}

func (c *mobilecoindAPIClient) AddMonitor(ctx context.Context, in *AddMonitorRequest, opts ...grpc.CallOption) (*AddMonitorResponse, error) {
	out := new(AddMonitorResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/AddMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) RemoveMonitor(ctx context.Context, in *RemoveMonitorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/RemoveMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetMonitorList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMonitorListResponse, error) {
	out := new(GetMonitorListResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetMonitorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetMonitorStatus(ctx context.Context, in *GetMonitorStatusRequest, opts ...grpc.CallOption) (*GetMonitorStatusResponse, error) {
	out := new(GetMonitorStatusResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetMonitorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetUnspentTxOutList(ctx context.Context, in *GetUnspentTxOutListRequest, opts ...grpc.CallOption) (*GetUnspentTxOutListResponse, error) {
	out := new(GetUnspentTxOutListResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetUnspentTxOutList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GenerateRootEntropy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateRootEntropyResponse, error) {
	out := new(GenerateRootEntropyResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GenerateRootEntropy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GenerateMnemonic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateMnemonicResponse, error) {
	out := new(GenerateMnemonicResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GenerateMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetAccountKeyFromRootEntropy(ctx context.Context, in *GetAccountKeyFromRootEntropyRequest, opts ...grpc.CallOption) (*GetAccountKeyResponse, error) {
	out := new(GetAccountKeyResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetAccountKeyFromRootEntropy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetAccountKeyFromMnemonic(ctx context.Context, in *GetAccountKeyFromMnemonicRequest, opts ...grpc.CallOption) (*GetAccountKeyResponse, error) {
	out := new(GetAccountKeyResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetAccountKeyFromMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetPublicAddress(ctx context.Context, in *GetPublicAddressRequest, opts ...grpc.CallOption) (*GetPublicAddressResponse, error) {
	out := new(GetPublicAddressResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetPublicAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) ParseRequestCode(ctx context.Context, in *ParseRequestCodeRequest, opts ...grpc.CallOption) (*ParseRequestCodeResponse, error) {
	out := new(ParseRequestCodeResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/ParseRequestCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) CreateRequestCode(ctx context.Context, in *CreateRequestCodeRequest, opts ...grpc.CallOption) (*CreateRequestCodeResponse, error) {
	out := new(CreateRequestCodeResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/CreateRequestCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) ParseTransferCode(ctx context.Context, in *ParseTransferCodeRequest, opts ...grpc.CallOption) (*ParseTransferCodeResponse, error) {
	out := new(ParseTransferCodeResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/ParseTransferCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) CreateTransferCode(ctx context.Context, in *CreateTransferCodeRequest, opts ...grpc.CallOption) (*CreateTransferCodeResponse, error) {
	out := new(CreateTransferCodeResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/CreateTransferCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) ParseAddressCode(ctx context.Context, in *ParseAddressCodeRequest, opts ...grpc.CallOption) (*ParseAddressCodeResponse, error) {
	out := new(ParseAddressCodeResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/ParseAddressCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) CreateAddressCode(ctx context.Context, in *CreateAddressCodeRequest, opts ...grpc.CallOption) (*CreateAddressCodeResponse, error) {
	out := new(CreateAddressCodeResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/CreateAddressCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetMixins(ctx context.Context, in *GetMixinsRequest, opts ...grpc.CallOption) (*GetMixinsResponse, error) {
	out := new(GetMixinsResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetMixins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetMembershipProofs(ctx context.Context, in *GetMembershipProofsRequest, opts ...grpc.CallOption) (*GetMembershipProofsResponse, error) {
	out := new(GetMembershipProofsResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetMembershipProofs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GenerateTx(ctx context.Context, in *GenerateTxRequest, opts ...grpc.CallOption) (*GenerateTxResponse, error) {
	out := new(GenerateTxResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GenerateTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GenerateOptimizationTx(ctx context.Context, in *GenerateOptimizationTxRequest, opts ...grpc.CallOption) (*GenerateOptimizationTxResponse, error) {
	out := new(GenerateOptimizationTxResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GenerateOptimizationTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GenerateTransferCodeTx(ctx context.Context, in *GenerateTransferCodeTxRequest, opts ...grpc.CallOption) (*GenerateTransferCodeTxResponse, error) {
	out := new(GenerateTransferCodeTxResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GenerateTransferCodeTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GenerateTxFromTxOutList(ctx context.Context, in *GenerateTxFromTxOutListRequest, opts ...grpc.CallOption) (*GenerateTxFromTxOutListResponse, error) {
	out := new(GenerateTxFromTxOutListResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GenerateTxFromTxOutList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error) {
	out := new(SubmitTxResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/SubmitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetLedgerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLedgerInfoResponse, error) {
	out := new(GetLedgerInfoResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetLedgerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error) {
	out := new(GetBlockInfoResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetBlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetTxStatusAsSender(ctx context.Context, in *SubmitTxResponse, opts ...grpc.CallOption) (*GetTxStatusAsSenderResponse, error) {
	out := new(GetTxStatusAsSenderResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetTxStatusAsSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetTxStatusAsReceiver(ctx context.Context, in *GetTxStatusAsReceiverRequest, opts ...grpc.CallOption) (*GetTxStatusAsReceiverResponse, error) {
	out := new(GetTxStatusAsReceiverResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetTxStatusAsReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetProcessedBlock(ctx context.Context, in *GetProcessedBlockRequest, opts ...grpc.CallOption) (*GetProcessedBlockResponse, error) {
	out := new(GetProcessedBlockResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetProcessedBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetBlockIndexByTxPubKey(ctx context.Context, in *GetBlockIndexByTxPubKeyRequest, opts ...grpc.CallOption) (*GetBlockIndexByTxPubKeyResponse, error) {
	out := new(GetBlockIndexByTxPubKeyResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetBlockIndexByTxPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error) {
	out := new(SendPaymentResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/SendPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) PayAddressCode(ctx context.Context, in *PayAddressCodeRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error) {
	out := new(SendPaymentResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/PayAddressCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) GetNetworkStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNetworkStatusResponse, error) {
	out := new(GetNetworkStatusResponse)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/GetNetworkStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) SetDbPassword(ctx context.Context, in *SetDbPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/SetDbPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilecoindAPIClient) UnlockDb(ctx context.Context, in *UnlockDbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mobilecoind_api.MobilecoindAPI/UnlockDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobilecoindAPIServer is the server API for MobilecoindAPI service.
// All implementations must embed UnimplementedMobilecoindAPIServer
// for forward compatibility
type MobilecoindAPIServer interface {
	// Monitors
	AddMonitor(context.Context, *AddMonitorRequest) (*AddMonitorResponse, error)
	RemoveMonitor(context.Context, *RemoveMonitorRequest) (*emptypb.Empty, error)
	GetMonitorList(context.Context, *emptypb.Empty) (*GetMonitorListResponse, error)
	GetMonitorStatus(context.Context, *GetMonitorStatusRequest) (*GetMonitorStatusResponse, error)
	GetUnspentTxOutList(context.Context, *GetUnspentTxOutListRequest) (*GetUnspentTxOutListResponse, error)
	// Utilities
	GenerateRootEntropy(context.Context, *emptypb.Empty) (*GenerateRootEntropyResponse, error)
	GenerateMnemonic(context.Context, *emptypb.Empty) (*GenerateMnemonicResponse, error)
	GetAccountKeyFromRootEntropy(context.Context, *GetAccountKeyFromRootEntropyRequest) (*GetAccountKeyResponse, error)
	GetAccountKeyFromMnemonic(context.Context, *GetAccountKeyFromMnemonicRequest) (*GetAccountKeyResponse, error)
	GetPublicAddress(context.Context, *GetPublicAddressRequest) (*GetPublicAddressResponse, error)
	// b58 Codes
	ParseRequestCode(context.Context, *ParseRequestCodeRequest) (*ParseRequestCodeResponse, error)
	CreateRequestCode(context.Context, *CreateRequestCodeRequest) (*CreateRequestCodeResponse, error)
	ParseTransferCode(context.Context, *ParseTransferCodeRequest) (*ParseTransferCodeResponse, error)
	CreateTransferCode(context.Context, *CreateTransferCodeRequest) (*CreateTransferCodeResponse, error)
	ParseAddressCode(context.Context, *ParseAddressCodeRequest) (*ParseAddressCodeResponse, error)
	CreateAddressCode(context.Context, *CreateAddressCodeRequest) (*CreateAddressCodeResponse, error)
	// Txs
	GetMixins(context.Context, *GetMixinsRequest) (*GetMixinsResponse, error)
	GetMembershipProofs(context.Context, *GetMembershipProofsRequest) (*GetMembershipProofsResponse, error)
	GenerateTx(context.Context, *GenerateTxRequest) (*GenerateTxResponse, error)
	GenerateOptimizationTx(context.Context, *GenerateOptimizationTxRequest) (*GenerateOptimizationTxResponse, error)
	GenerateTransferCodeTx(context.Context, *GenerateTransferCodeTxRequest) (*GenerateTransferCodeTxResponse, error)
	GenerateTxFromTxOutList(context.Context, *GenerateTxFromTxOutListRequest) (*GenerateTxFromTxOutListResponse, error)
	SubmitTx(context.Context, *SubmitTxRequest) (*SubmitTxResponse, error)
	// Databases
	GetLedgerInfo(context.Context, *emptypb.Empty) (*GetLedgerInfoResponse, error)
	GetBlockInfo(context.Context, *GetBlockInfoRequest) (*GetBlockInfoResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetTxStatusAsSender(context.Context, *SubmitTxResponse) (*GetTxStatusAsSenderResponse, error)
	GetTxStatusAsReceiver(context.Context, *GetTxStatusAsReceiverRequest) (*GetTxStatusAsReceiverResponse, error)
	GetProcessedBlock(context.Context, *GetProcessedBlockRequest) (*GetProcessedBlockResponse, error)
	GetBlockIndexByTxPubKey(context.Context, *GetBlockIndexByTxPubKeyRequest) (*GetBlockIndexByTxPubKeyResponse, error)
	// Convenience calls
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error)
	PayAddressCode(context.Context, *PayAddressCodeRequest) (*SendPaymentResponse, error)
	// Network status
	GetNetworkStatus(context.Context, *emptypb.Empty) (*GetNetworkStatusResponse, error)
	// Database encryption
	SetDbPassword(context.Context, *SetDbPasswordRequest) (*emptypb.Empty, error)
	UnlockDb(context.Context, *UnlockDbRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMobilecoindAPIServer()
}

// UnimplementedMobilecoindAPIServer must be embedded to have forward compatible implementations.
type UnimplementedMobilecoindAPIServer struct {
}

func (*UnimplementedMobilecoindAPIServer) AddMonitor(context.Context, *AddMonitorRequest) (*AddMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMonitor not implemented")
}
func (*UnimplementedMobilecoindAPIServer) RemoveMonitor(context.Context, *RemoveMonitorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMonitor not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetMonitorList(context.Context, *emptypb.Empty) (*GetMonitorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorList not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetMonitorStatus(context.Context, *GetMonitorStatusRequest) (*GetMonitorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorStatus not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetUnspentTxOutList(context.Context, *GetUnspentTxOutListRequest) (*GetUnspentTxOutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnspentTxOutList not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GenerateRootEntropy(context.Context, *emptypb.Empty) (*GenerateRootEntropyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRootEntropy not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GenerateMnemonic(context.Context, *emptypb.Empty) (*GenerateMnemonicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMnemonic not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetAccountKeyFromRootEntropy(context.Context, *GetAccountKeyFromRootEntropyRequest) (*GetAccountKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountKeyFromRootEntropy not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetAccountKeyFromMnemonic(context.Context, *GetAccountKeyFromMnemonicRequest) (*GetAccountKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountKeyFromMnemonic not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetPublicAddress(context.Context, *GetPublicAddressRequest) (*GetPublicAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicAddress not implemented")
}
func (*UnimplementedMobilecoindAPIServer) ParseRequestCode(context.Context, *ParseRequestCodeRequest) (*ParseRequestCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseRequestCode not implemented")
}
func (*UnimplementedMobilecoindAPIServer) CreateRequestCode(context.Context, *CreateRequestCodeRequest) (*CreateRequestCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequestCode not implemented")
}
func (*UnimplementedMobilecoindAPIServer) ParseTransferCode(context.Context, *ParseTransferCodeRequest) (*ParseTransferCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseTransferCode not implemented")
}
func (*UnimplementedMobilecoindAPIServer) CreateTransferCode(context.Context, *CreateTransferCodeRequest) (*CreateTransferCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferCode not implemented")
}
func (*UnimplementedMobilecoindAPIServer) ParseAddressCode(context.Context, *ParseAddressCodeRequest) (*ParseAddressCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAddressCode not implemented")
}
func (*UnimplementedMobilecoindAPIServer) CreateAddressCode(context.Context, *CreateAddressCodeRequest) (*CreateAddressCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddressCode not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetMixins(context.Context, *GetMixinsRequest) (*GetMixinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMixins not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetMembershipProofs(context.Context, *GetMembershipProofsRequest) (*GetMembershipProofsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipProofs not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GenerateTx(context.Context, *GenerateTxRequest) (*GenerateTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTx not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GenerateOptimizationTx(context.Context, *GenerateOptimizationTxRequest) (*GenerateOptimizationTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOptimizationTx not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GenerateTransferCodeTx(context.Context, *GenerateTransferCodeTxRequest) (*GenerateTransferCodeTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTransferCodeTx not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GenerateTxFromTxOutList(context.Context, *GenerateTxFromTxOutListRequest) (*GenerateTxFromTxOutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTxFromTxOutList not implemented")
}
func (*UnimplementedMobilecoindAPIServer) SubmitTx(context.Context, *SubmitTxRequest) (*SubmitTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTx not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetLedgerInfo(context.Context, *emptypb.Empty) (*GetLedgerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerInfo not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetBlockInfo(context.Context, *GetBlockInfoRequest) (*GetBlockInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockInfo not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetTxStatusAsSender(context.Context, *SubmitTxResponse) (*GetTxStatusAsSenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxStatusAsSender not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetTxStatusAsReceiver(context.Context, *GetTxStatusAsReceiverRequest) (*GetTxStatusAsReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxStatusAsReceiver not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetProcessedBlock(context.Context, *GetProcessedBlockRequest) (*GetProcessedBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessedBlock not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetBlockIndexByTxPubKey(context.Context, *GetBlockIndexByTxPubKeyRequest) (*GetBlockIndexByTxPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockIndexByTxPubKey not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedMobilecoindAPIServer) SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (*UnimplementedMobilecoindAPIServer) PayAddressCode(context.Context, *PayAddressCodeRequest) (*SendPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAddressCode not implemented")
}
func (*UnimplementedMobilecoindAPIServer) GetNetworkStatus(context.Context, *emptypb.Empty) (*GetNetworkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkStatus not implemented")
}
func (*UnimplementedMobilecoindAPIServer) SetDbPassword(context.Context, *SetDbPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDbPassword not implemented")
}
func (*UnimplementedMobilecoindAPIServer) UnlockDb(context.Context, *UnlockDbRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockDb not implemented")
}
func (*UnimplementedMobilecoindAPIServer) mustEmbedUnimplementedMobilecoindAPIServer() {}

func RegisterMobilecoindAPIServer(s *grpc.Server, srv MobilecoindAPIServer) {
	s.RegisterService(&_MobilecoindAPI_serviceDesc, srv)
}

func _MobilecoindAPI_AddMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).AddMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/AddMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).AddMonitor(ctx, req.(*AddMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_RemoveMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).RemoveMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/RemoveMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).RemoveMonitor(ctx, req.(*RemoveMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetMonitorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetMonitorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetMonitorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetMonitorList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetMonitorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetMonitorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetMonitorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetMonitorStatus(ctx, req.(*GetMonitorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetUnspentTxOutList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnspentTxOutListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetUnspentTxOutList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetUnspentTxOutList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetUnspentTxOutList(ctx, req.(*GetUnspentTxOutListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GenerateRootEntropy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GenerateRootEntropy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GenerateRootEntropy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GenerateRootEntropy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GenerateMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GenerateMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GenerateMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GenerateMnemonic(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetAccountKeyFromRootEntropy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountKeyFromRootEntropyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetAccountKeyFromRootEntropy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetAccountKeyFromRootEntropy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetAccountKeyFromRootEntropy(ctx, req.(*GetAccountKeyFromRootEntropyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetAccountKeyFromMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountKeyFromMnemonicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetAccountKeyFromMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetAccountKeyFromMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetAccountKeyFromMnemonic(ctx, req.(*GetAccountKeyFromMnemonicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetPublicAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetPublicAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetPublicAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetPublicAddress(ctx, req.(*GetPublicAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_ParseRequestCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequestCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).ParseRequestCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/ParseRequestCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).ParseRequestCode(ctx, req.(*ParseRequestCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_CreateRequestCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).CreateRequestCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/CreateRequestCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).CreateRequestCode(ctx, req.(*CreateRequestCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_ParseTransferCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTransferCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).ParseTransferCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/ParseTransferCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).ParseTransferCode(ctx, req.(*ParseTransferCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_CreateTransferCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).CreateTransferCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/CreateTransferCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).CreateTransferCode(ctx, req.(*CreateTransferCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_ParseAddressCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseAddressCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).ParseAddressCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/ParseAddressCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).ParseAddressCode(ctx, req.(*ParseAddressCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_CreateAddressCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).CreateAddressCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/CreateAddressCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).CreateAddressCode(ctx, req.(*CreateAddressCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetMixins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMixinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetMixins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetMixins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetMixins(ctx, req.(*GetMixinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetMembershipProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembershipProofsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetMembershipProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetMembershipProofs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetMembershipProofs(ctx, req.(*GetMembershipProofsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GenerateTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GenerateTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GenerateTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GenerateTx(ctx, req.(*GenerateTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GenerateOptimizationTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOptimizationTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GenerateOptimizationTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GenerateOptimizationTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GenerateOptimizationTx(ctx, req.(*GenerateOptimizationTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GenerateTransferCodeTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTransferCodeTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GenerateTransferCodeTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GenerateTransferCodeTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GenerateTransferCodeTx(ctx, req.(*GenerateTransferCodeTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GenerateTxFromTxOutList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTxFromTxOutListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GenerateTxFromTxOutList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GenerateTxFromTxOutList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GenerateTxFromTxOutList(ctx, req.(*GenerateTxFromTxOutListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).SubmitTx(ctx, req.(*SubmitTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetLedgerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetLedgerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetLedgerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetLedgerInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetBlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetBlockInfo(ctx, req.(*GetBlockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetTxStatusAsSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTxResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetTxStatusAsSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetTxStatusAsSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetTxStatusAsSender(ctx, req.(*SubmitTxResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetTxStatusAsReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxStatusAsReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetTxStatusAsReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetTxStatusAsReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetTxStatusAsReceiver(ctx, req.(*GetTxStatusAsReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetProcessedBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessedBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetProcessedBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetProcessedBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetProcessedBlock(ctx, req.(*GetProcessedBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetBlockIndexByTxPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockIndexByTxPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetBlockIndexByTxPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetBlockIndexByTxPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetBlockIndexByTxPubKey(ctx, req.(*GetBlockIndexByTxPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_PayAddressCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAddressCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).PayAddressCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/PayAddressCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).PayAddressCode(ctx, req.(*PayAddressCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_GetNetworkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).GetNetworkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/GetNetworkStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).GetNetworkStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_SetDbPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDbPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).SetDbPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/SetDbPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).SetDbPassword(ctx, req.(*SetDbPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilecoindAPI_UnlockDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilecoindAPIServer).UnlockDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilecoind_api.MobilecoindAPI/UnlockDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilecoindAPIServer).UnlockDb(ctx, req.(*UnlockDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MobilecoindAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mobilecoind_api.MobilecoindAPI",
	HandlerType: (*MobilecoindAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMonitor",
			Handler:    _MobilecoindAPI_AddMonitor_Handler,
		},
		{
			MethodName: "RemoveMonitor",
			Handler:    _MobilecoindAPI_RemoveMonitor_Handler,
		},
		{
			MethodName: "GetMonitorList",
			Handler:    _MobilecoindAPI_GetMonitorList_Handler,
		},
		{
			MethodName: "GetMonitorStatus",
			Handler:    _MobilecoindAPI_GetMonitorStatus_Handler,
		},
		{
			MethodName: "GetUnspentTxOutList",
			Handler:    _MobilecoindAPI_GetUnspentTxOutList_Handler,
		},
		{
			MethodName: "GenerateRootEntropy",
			Handler:    _MobilecoindAPI_GenerateRootEntropy_Handler,
		},
		{
			MethodName: "GenerateMnemonic",
			Handler:    _MobilecoindAPI_GenerateMnemonic_Handler,
		},
		{
			MethodName: "GetAccountKeyFromRootEntropy",
			Handler:    _MobilecoindAPI_GetAccountKeyFromRootEntropy_Handler,
		},
		{
			MethodName: "GetAccountKeyFromMnemonic",
			Handler:    _MobilecoindAPI_GetAccountKeyFromMnemonic_Handler,
		},
		{
			MethodName: "GetPublicAddress",
			Handler:    _MobilecoindAPI_GetPublicAddress_Handler,
		},
		{
			MethodName: "ParseRequestCode",
			Handler:    _MobilecoindAPI_ParseRequestCode_Handler,
		},
		{
			MethodName: "CreateRequestCode",
			Handler:    _MobilecoindAPI_CreateRequestCode_Handler,
		},
		{
			MethodName: "ParseTransferCode",
			Handler:    _MobilecoindAPI_ParseTransferCode_Handler,
		},
		{
			MethodName: "CreateTransferCode",
			Handler:    _MobilecoindAPI_CreateTransferCode_Handler,
		},
		{
			MethodName: "ParseAddressCode",
			Handler:    _MobilecoindAPI_ParseAddressCode_Handler,
		},
		{
			MethodName: "CreateAddressCode",
			Handler:    _MobilecoindAPI_CreateAddressCode_Handler,
		},
		{
			MethodName: "GetMixins",
			Handler:    _MobilecoindAPI_GetMixins_Handler,
		},
		{
			MethodName: "GetMembershipProofs",
			Handler:    _MobilecoindAPI_GetMembershipProofs_Handler,
		},
		{
			MethodName: "GenerateTx",
			Handler:    _MobilecoindAPI_GenerateTx_Handler,
		},
		{
			MethodName: "GenerateOptimizationTx",
			Handler:    _MobilecoindAPI_GenerateOptimizationTx_Handler,
		},
		{
			MethodName: "GenerateTransferCodeTx",
			Handler:    _MobilecoindAPI_GenerateTransferCodeTx_Handler,
		},
		{
			MethodName: "GenerateTxFromTxOutList",
			Handler:    _MobilecoindAPI_GenerateTxFromTxOutList_Handler,
		},
		{
			MethodName: "SubmitTx",
			Handler:    _MobilecoindAPI_SubmitTx_Handler,
		},
		{
			MethodName: "GetLedgerInfo",
			Handler:    _MobilecoindAPI_GetLedgerInfo_Handler,
		},
		{
			MethodName: "GetBlockInfo",
			Handler:    _MobilecoindAPI_GetBlockInfo_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _MobilecoindAPI_GetBlock_Handler,
		},
		{
			MethodName: "GetTxStatusAsSender",
			Handler:    _MobilecoindAPI_GetTxStatusAsSender_Handler,
		},
		{
			MethodName: "GetTxStatusAsReceiver",
			Handler:    _MobilecoindAPI_GetTxStatusAsReceiver_Handler,
		},
		{
			MethodName: "GetProcessedBlock",
			Handler:    _MobilecoindAPI_GetProcessedBlock_Handler,
		},
		{
			MethodName: "GetBlockIndexByTxPubKey",
			Handler:    _MobilecoindAPI_GetBlockIndexByTxPubKey_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _MobilecoindAPI_GetBalance_Handler,
		},
		{
			MethodName: "SendPayment",
			Handler:    _MobilecoindAPI_SendPayment_Handler,
		},
		{
			MethodName: "PayAddressCode",
			Handler:    _MobilecoindAPI_PayAddressCode_Handler,
		},
		{
			MethodName: "GetNetworkStatus",
			Handler:    _MobilecoindAPI_GetNetworkStatus_Handler,
		},
		{
			MethodName: "SetDbPassword",
			Handler:    _MobilecoindAPI_SetDbPassword_Handler,
		},
		{
			MethodName: "UnlockDb",
			Handler:    _MobilecoindAPI_UnlockDb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mobilecoind_api.proto",
}
