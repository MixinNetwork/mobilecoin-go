// Copyright (c) 2018-2020 MobileCoin Inc.

// MUST BE KEPT IN SYNC WITH RUST CODE!

// mobilecoind client data types and service descriptors.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: mobilecoind_api.proto

package block

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Possible transaction status values. Senders check with key images. Receivers check with tx public keys.
type TxStatus int32

const (
	// The transaction is not in the public ledger.
	TxStatus_Unknown TxStatus = 0
	// The transaction is in the public ledger.
	TxStatus_Verified TxStatus = 1
	// Error: The transaction is not in the public ledger, and the tombstone block has been exceeded.
	TxStatus_TombstoneBlockExceeded TxStatus = 2
	// The transaction was found in the ledger but the confirmation number is incorrect
	TxStatus_InvalidConfirmationNumber TxStatus = 3
)

// Enum value maps for TxStatus.
var (
	TxStatus_name = map[int32]string{
		0: "Unknown",
		1: "Verified",
		2: "TombstoneBlockExceeded",
		3: "InvalidConfirmationNumber",
	}
	TxStatus_value = map[string]int32{
		"Unknown":                   0,
		"Verified":                  1,
		"TombstoneBlockExceeded":    2,
		"InvalidConfirmationNumber": 3,
	}
)

func (x TxStatus) Enum() *TxStatus {
	p := new(TxStatus)
	*p = x
	return p
}

func (x TxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mobilecoind_api_proto_enumTypes[0].Descriptor()
}

func (TxStatus) Type() protoreflect.EnumType {
	return &file_mobilecoind_api_proto_enumTypes[0]
}

func (x TxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxStatus.Descriptor instead.
func (TxStatus) EnumDescriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{0}
}

// Enum used to indicate whether a ProcessedTxOut is a sent one or a received one.
type ProcessedTxOutDirection int32

const (
	// This should never happen, but is available here as an option to catch uninitialized data.
	// The name "Unknown" cannot be used because, quoting the protobuf compiler:
	// Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type, not children of it.  Therefore, "Unknown" must be unique within "mobilecoind_api", not just within "ProcessedTxOutDirection".
	ProcessedTxOutDirection_Invalid ProcessedTxOutDirection = 0
	// The ProcessedTxOut has been received at the block queried for.
	ProcessedTxOutDirection_Received ProcessedTxOutDirection = 1
	// The ProcessedTxOut has been spent at the block queried for.
	ProcessedTxOutDirection_Spent ProcessedTxOutDirection = 2
)

// Enum value maps for ProcessedTxOutDirection.
var (
	ProcessedTxOutDirection_name = map[int32]string{
		0: "Invalid",
		1: "Received",
		2: "Spent",
	}
	ProcessedTxOutDirection_value = map[string]int32{
		"Invalid":  0,
		"Received": 1,
		"Spent":    2,
	}
)

func (x ProcessedTxOutDirection) Enum() *ProcessedTxOutDirection {
	p := new(ProcessedTxOutDirection)
	*p = x
	return p
}

func (x ProcessedTxOutDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessedTxOutDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_mobilecoind_api_proto_enumTypes[1].Descriptor()
}

func (ProcessedTxOutDirection) Type() protoreflect.EnumType {
	return &file_mobilecoind_api_proto_enumTypes[1]
}

func (x ProcessedTxOutDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessedTxOutDirection.Descriptor instead.
func (ProcessedTxOutDirection) EnumDescriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{1}
}

// Structure used in specifying the list of outputs when generating a transaction.
type Outlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    uint64         `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Receiver *PublicAddress `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *Outlay) Reset() {
	*x = Outlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outlay) ProtoMessage() {}

func (x *Outlay) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outlay.ProtoReflect.Descriptor instead.
func (*Outlay) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{0}
}

func (x *Outlay) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Outlay) GetReceiver() *PublicAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

// Structure used to refer to a TxOut in the ledger that is presumed to be spendable.
// The structure is annotated with extra information needed to spend the TxOut in a payment, calculated using the private keys that control the TxOut.
type UnspentTxOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual TxOut object found in the ledger.
	TxOut *TxOut `protobuf:"bytes,1,opt,name=tx_out,json=txOut,proto3" json:"tx_out,omitempty"`
	// The subaddress the TxOut was sent to.
	SubaddressIndex uint64 `protobuf:"varint,2,opt,name=subaddress_index,json=subaddressIndex,proto3" json:"subaddress_index,omitempty"`
	// The key image of the TxOut.
	KeyImage *KeyImage `protobuf:"bytes,3,opt,name=key_image,json=keyImage,proto3" json:"key_image,omitempty"`
	// The value of the TxOut.
	Value uint64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// The block height at which this UnspentTxOut was last attempted to be spent.
	AttemptedSpendHeight uint64 `protobuf:"varint,5,opt,name=attempted_spend_height,json=attemptedSpendHeight,proto3" json:"attempted_spend_height,omitempty"`
	// The tombstone block used when we attempted to spend the UTXO.
	AttemptedSpendTombstone uint64 `protobuf:"varint,6,opt,name=attempted_spend_tombstone,json=attemptedSpendTombstone,proto3" json:"attempted_spend_tombstone,omitempty"`
	// The monitor id this UnspentTxOut belongs to.
	// Note that this field is not included in the Rust `utxo_store::UnspentTxOut` struct.
	MonitorId []byte `protobuf:"bytes,10,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
}

func (x *UnspentTxOut) Reset() {
	*x = UnspentTxOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnspentTxOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentTxOut) ProtoMessage() {}

func (x *UnspentTxOut) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentTxOut.ProtoReflect.Descriptor instead.
func (*UnspentTxOut) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{1}
}

func (x *UnspentTxOut) GetTxOut() *TxOut {
	if x != nil {
		return x.TxOut
	}
	return nil
}

func (x *UnspentTxOut) GetSubaddressIndex() uint64 {
	if x != nil {
		return x.SubaddressIndex
	}
	return 0
}

func (x *UnspentTxOut) GetKeyImage() *KeyImage {
	if x != nil {
		return x.KeyImage
	}
	return nil
}

func (x *UnspentTxOut) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnspentTxOut) GetAttemptedSpendHeight() uint64 {
	if x != nil {
		return x.AttemptedSpendHeight
	}
	return 0
}

func (x *UnspentTxOut) GetAttemptedSpendTombstone() uint64 {
	if x != nil {
		return x.AttemptedSpendTombstone
	}
	return 0
}

func (x *UnspentTxOut) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

// Structure used to refer to a prepared transaction
type TxProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of inputs being spent.
	InputList []*UnspentTxOut `protobuf:"bytes,1,rep,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`
	// List of outputs being created.
	// This excludes the fee output.
	OutlayList []*Outlay `protobuf:"bytes,2,rep,name=outlay_list,json=outlayList,proto3" json:"outlay_list,omitempty"`
	// The actual transaction object.
	// Together with the private view/spend keys, this structure contains all information in existence about the transaction.
	Tx *Tx `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	// The transaction fee. This is equal to `tx.prefix.fee`.
	// Note that changing this fee will have no effect on the transaction. Changing the fee
	// inside `tx` will invalidate the ring signature.
	Fee uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	/// A map of outlay index -> TxOut index in the Tx object.
	/// This is needed to map recipients to their respective TxOuts.
	OutlayIndexToTxOutIndex map[uint64]uint64 `protobuf:"bytes,5,rep,name=outlay_index_to_tx_out_index,json=outlayIndexToTxOutIndex,proto3" json:"outlay_index_to_tx_out_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	/// A list of the confirmation numbers, in the same order
	/// as the outlays.
	OutlayConfirmationNumbers [][]byte `protobuf:"bytes,6,rep,name=outlay_confirmation_numbers,json=outlayConfirmationNumbers,proto3" json:"outlay_confirmation_numbers,omitempty"`
}

func (x *TxProposal) Reset() {
	*x = TxProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxProposal) ProtoMessage() {}

func (x *TxProposal) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxProposal.ProtoReflect.Descriptor instead.
func (*TxProposal) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{2}
}

func (x *TxProposal) GetInputList() []*UnspentTxOut {
	if x != nil {
		return x.InputList
	}
	return nil
}

func (x *TxProposal) GetOutlayList() []*Outlay {
	if x != nil {
		return x.OutlayList
	}
	return nil
}

func (x *TxProposal) GetTx() *Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxProposal) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TxProposal) GetOutlayIndexToTxOutIndex() map[uint64]uint64 {
	if x != nil {
		return x.OutlayIndexToTxOutIndex
	}
	return nil
}

func (x *TxProposal) GetOutlayConfirmationNumbers() [][]byte {
	if x != nil {
		return x.OutlayConfirmationNumbers
	}
	return nil
}

// Structure used to check transaction status as a Sender.
type SenderTxReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key images that are going to be added to the ledger once the transaction goes through.
	KeyImageList []*KeyImage `protobuf:"bytes,1,rep,name=key_image_list,json=keyImageList,proto3" json:"key_image_list,omitempty"`
	// Tombstone block set in the transaction.
	Tombstone uint64 `protobuf:"varint,2,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
}

func (x *SenderTxReceipt) Reset() {
	*x = SenderTxReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenderTxReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderTxReceipt) ProtoMessage() {}

func (x *SenderTxReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderTxReceipt.ProtoReflect.Descriptor instead.
func (*SenderTxReceipt) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{3}
}

func (x *SenderTxReceipt) GetKeyImageList() []*KeyImage {
	if x != nil {
		return x.KeyImageList
	}
	return nil
}

func (x *SenderTxReceipt) GetTombstone() uint64 {
	if x != nil {
		return x.Tombstone
	}
	return 0
}

// Structure used to check transaction status as a recipient.
// There exists one receipt per output, so a transaction having multiple outputs would have
// multiple ReceiverTxReceipts.
type ReceiverTxReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The recipient this receipt refers to
	Recipient *PublicAddress `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// The public key of the TxOut sent to this recipient.
	TxPublicKey *CompressedRistretto `protobuf:"bytes,2,opt,name=tx_public_key,json=txPublicKey,proto3" json:"tx_public_key,omitempty"`
	// The hash of the TxOut sent to this recipient.
	TxOutHash []byte `protobuf:"bytes,3,opt,name=tx_out_hash,json=txOutHash,proto3" json:"tx_out_hash,omitempty"`
	// Tombstone block set in the transaction.
	Tombstone uint64 `protobuf:"varint,4,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	// Confirmation number for this TxOut
	ConfirmationNumber []byte `protobuf:"bytes,5,opt,name=confirmation_number,json=confirmationNumber,proto3" json:"confirmation_number,omitempty"`
}

func (x *ReceiverTxReceipt) Reset() {
	*x = ReceiverTxReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverTxReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverTxReceipt) ProtoMessage() {}

func (x *ReceiverTxReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverTxReceipt.ProtoReflect.Descriptor instead.
func (*ReceiverTxReceipt) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{4}
}

func (x *ReceiverTxReceipt) GetRecipient() *PublicAddress {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *ReceiverTxReceipt) GetTxPublicKey() *CompressedRistretto {
	if x != nil {
		return x.TxPublicKey
	}
	return nil
}

func (x *ReceiverTxReceipt) GetTxOutHash() []byte {
	if x != nil {
		return x.TxOutHash
	}
	return nil
}

func (x *ReceiverTxReceipt) GetTombstone() uint64 {
	if x != nil {
		return x.Tombstone
	}
	return 0
}

func (x *ReceiverTxReceipt) GetConfirmationNumber() []byte {
	if x != nil {
		return x.ConfirmationNumber
	}
	return nil
}

// Structure used to report monitor status
type MonitorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account key the monitor is monitoring.
	AccountKey *AccountKey `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	// The first subaddress being monitored.
	FirstSubaddress uint64 `protobuf:"varint,2,opt,name=first_subaddress,json=firstSubaddress,proto3" json:"first_subaddress,omitempty"`
	// The number of subaddresses being monitored, starting at first_subaddress.
	NumSubaddresses uint64 `protobuf:"varint,3,opt,name=num_subaddresses,json=numSubaddresses,proto3" json:"num_subaddresses,omitempty"`
	// Block index we started scanning from.
	FirstBlock uint64 `protobuf:"varint,4,opt,name=first_block,json=firstBlock,proto3" json:"first_block,omitempty"`
	// Next block we are waiting to sync.
	NextBlock uint64 `protobuf:"varint,5,opt,name=next_block,json=nextBlock,proto3" json:"next_block,omitempty"`
	// Optional monitor name.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MonitorStatus) Reset() {
	*x = MonitorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorStatus) ProtoMessage() {}

func (x *MonitorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorStatus.ProtoReflect.Descriptor instead.
func (*MonitorStatus) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{5}
}

func (x *MonitorStatus) GetAccountKey() *AccountKey {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

func (x *MonitorStatus) GetFirstSubaddress() uint64 {
	if x != nil {
		return x.FirstSubaddress
	}
	return 0
}

func (x *MonitorStatus) GetNumSubaddresses() uint64 {
	if x != nil {
		return x.NumSubaddresses
	}
	return 0
}

func (x *MonitorStatus) GetFirstBlock() uint64 {
	if x != nil {
		return x.FirstBlock
	}
	return 0
}

func (x *MonitorStatus) GetNextBlock() uint64 {
	if x != nil {
		return x.NextBlock
	}
	return 0
}

func (x *MonitorStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Structure used to report processed information for TxOuts discovered in a given processed block.
type ProcessedTxOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The monitor id that owns the TxOut.
	MonitorId []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	// The subaddress that owns the TxOut.
	SubaddressIndex uint64 `protobuf:"varint,2,opt,name=subaddress_index,json=subaddressIndex,proto3" json:"subaddress_index,omitempty"`
	// The public key of the TxOut.
	PublicKey *CompressedRistretto `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The key image of the TxOut.
	KeyImage *KeyImage `protobuf:"bytes,4,opt,name=key_image,json=keyImage,proto3" json:"key_image,omitempty"`
	// The value of the TxOut.
	Value uint64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	// Whether the TxOut was received (deposit to subaddress) or spent (withdrawal from subaddress).
	Direction ProcessedTxOutDirection `protobuf:"varint,6,opt,name=direction,proto3,enum=mobilecoind_api.ProcessedTxOutDirection" json:"direction,omitempty"`
	// The b58-encoded Address Code for the subaddress that owns the TxOut.
	AddressCode string `protobuf:"bytes,7,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
}

func (x *ProcessedTxOut) Reset() {
	*x = ProcessedTxOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessedTxOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedTxOut) ProtoMessage() {}

func (x *ProcessedTxOut) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedTxOut.ProtoReflect.Descriptor instead.
func (*ProcessedTxOut) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessedTxOut) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

func (x *ProcessedTxOut) GetSubaddressIndex() uint64 {
	if x != nil {
		return x.SubaddressIndex
	}
	return 0
}

func (x *ProcessedTxOut) GetPublicKey() *CompressedRistretto {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ProcessedTxOut) GetKeyImage() *KeyImage {
	if x != nil {
		return x.KeyImage
	}
	return nil
}

func (x *ProcessedTxOut) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProcessedTxOut) GetDirection() ProcessedTxOutDirection {
	if x != nil {
		return x.Direction
	}
	return ProcessedTxOutDirection_Invalid
}

func (x *ProcessedTxOut) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

// Add a new monitor.
type AddMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account key to monitor.
	AccountKey *AccountKey `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	// The first subaddress being monitored.
	FirstSubaddress uint64 `protobuf:"varint,2,opt,name=first_subaddress,json=firstSubaddress,proto3" json:"first_subaddress,omitempty"`
	// The number of subaddresses being monitored, starting at first_subaddress.
	NumSubaddresses uint64 `protobuf:"varint,3,opt,name=num_subaddresses,json=numSubaddresses,proto3" json:"num_subaddresses,omitempty"`
	// Block index to start monitoring from.
	FirstBlock uint64 `protobuf:"varint,4,opt,name=first_block,json=firstBlock,proto3" json:"first_block,omitempty"`
	// Optional name.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddMonitorRequest) Reset() {
	*x = AddMonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMonitorRequest) ProtoMessage() {}

func (x *AddMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMonitorRequest.ProtoReflect.Descriptor instead.
func (*AddMonitorRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{7}
}

func (x *AddMonitorRequest) GetAccountKey() *AccountKey {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

func (x *AddMonitorRequest) GetFirstSubaddress() uint64 {
	if x != nil {
		return x.FirstSubaddress
	}
	return 0
}

func (x *AddMonitorRequest) GetNumSubaddresses() uint64 {
	if x != nil {
		return x.NumSubaddresses
	}
	return 0
}

func (x *AddMonitorRequest) GetFirstBlock() uint64 {
	if x != nil {
		return x.FirstBlock
	}
	return 0
}

func (x *AddMonitorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorId []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	IsNew     bool   `protobuf:"varint,2,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (x *AddMonitorResponse) Reset() {
	*x = AddMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMonitorResponse) ProtoMessage() {}

func (x *AddMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMonitorResponse.ProtoReflect.Descriptor instead.
func (*AddMonitorResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{8}
}

func (x *AddMonitorResponse) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

func (x *AddMonitorResponse) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

// Remove a monitor and all associated data.
type RemoveMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorId []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
}

func (x *RemoveMonitorRequest) Reset() {
	*x = RemoveMonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMonitorRequest) ProtoMessage() {}

func (x *RemoveMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMonitorRequest.ProtoReflect.Descriptor instead.
func (*RemoveMonitorRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveMonitorRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

// List all known monitor ids.
// - empty request
type GetMonitorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorIdList [][]byte `protobuf:"bytes,1,rep,name=monitor_id_list,json=monitorIdList,proto3" json:"monitor_id_list,omitempty"`
}

func (x *GetMonitorListResponse) Reset() {
	*x = GetMonitorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorListResponse) ProtoMessage() {}

func (x *GetMonitorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorListResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorListResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetMonitorListResponse) GetMonitorIdList() [][]byte {
	if x != nil {
		return x.MonitorIdList
	}
	return nil
}

// Get the status of a specific monitor.
type GetMonitorStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorId []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
}

func (x *GetMonitorStatusRequest) Reset() {
	*x = GetMonitorStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorStatusRequest) ProtoMessage() {}

func (x *GetMonitorStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorStatusRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetMonitorStatusRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

type GetMonitorStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *MonitorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetMonitorStatusResponse) Reset() {
	*x = GetMonitorStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorStatusResponse) ProtoMessage() {}

func (x *GetMonitorStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorStatusResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetMonitorStatusResponse) GetStatus() *MonitorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Get a list of UnspentTxOuts for a given monitor and subadddress index.
type GetUnspentTxOutListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorId       []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	SubaddressIndex uint64 `protobuf:"varint,2,opt,name=subaddress_index,json=subaddressIndex,proto3" json:"subaddress_index,omitempty"`
}

func (x *GetUnspentTxOutListRequest) Reset() {
	*x = GetUnspentTxOutListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnspentTxOutListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnspentTxOutListRequest) ProtoMessage() {}

func (x *GetUnspentTxOutListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnspentTxOutListRequest.ProtoReflect.Descriptor instead.
func (*GetUnspentTxOutListRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetUnspentTxOutListRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

func (x *GetUnspentTxOutListRequest) GetSubaddressIndex() uint64 {
	if x != nil {
		return x.SubaddressIndex
	}
	return 0
}

type GetUnspentTxOutListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputList []*UnspentTxOut `protobuf:"bytes,1,rep,name=output_list,json=outputList,proto3" json:"output_list,omitempty"`
}

func (x *GetUnspentTxOutListResponse) Reset() {
	*x = GetUnspentTxOutListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnspentTxOutListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnspentTxOutListResponse) ProtoMessage() {}

func (x *GetUnspentTxOutListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnspentTxOutListResponse.ProtoReflect.Descriptor instead.
func (*GetUnspentTxOutListResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetUnspentTxOutListResponse) GetOutputList() []*UnspentTxOut {
	if x != nil {
		return x.OutputList
	}
	return nil
}

// Generate a new random root entropy value.
// - empty request
type GenerateEntropyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 32 bytes generated using a cryptographically secure RNG.
	Entropy []byte `protobuf:"bytes,1,opt,name=entropy,proto3" json:"entropy,omitempty"`
}

func (x *GenerateEntropyResponse) Reset() {
	*x = GenerateEntropyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateEntropyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateEntropyResponse) ProtoMessage() {}

func (x *GenerateEntropyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateEntropyResponse.ProtoReflect.Descriptor instead.
func (*GenerateEntropyResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateEntropyResponse) GetEntropy() []byte {
	if x != nil {
		return x.Entropy
	}
	return nil
}

// Generate an AccountKey from a 32 byte root entropy value.
type GetAccountKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entropy []byte `protobuf:"bytes,1,opt,name=entropy,proto3" json:"entropy,omitempty"`
}

func (x *GetAccountKeyRequest) Reset() {
	*x = GetAccountKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountKeyRequest) ProtoMessage() {}

func (x *GetAccountKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountKeyRequest.ProtoReflect.Descriptor instead.
func (*GetAccountKeyRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetAccountKeyRequest) GetEntropy() []byte {
	if x != nil {
		return x.Entropy
	}
	return nil
}

type GetAccountKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountKey *AccountKey `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
}

func (x *GetAccountKeyResponse) Reset() {
	*x = GetAccountKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountKeyResponse) ProtoMessage() {}

func (x *GetAccountKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountKeyResponse.ProtoReflect.Descriptor instead.
func (*GetAccountKeyResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetAccountKeyResponse) GetAccountKey() *AccountKey {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

// Get the public address for a given monitor and subadddress index.
type GetPublicAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorId       []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	SubaddressIndex uint64 `protobuf:"varint,2,opt,name=subaddress_index,json=subaddressIndex,proto3" json:"subaddress_index,omitempty"`
}

func (x *GetPublicAddressRequest) Reset() {
	*x = GetPublicAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicAddressRequest) ProtoMessage() {}

func (x *GetPublicAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicAddressRequest.ProtoReflect.Descriptor instead.
func (*GetPublicAddressRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetPublicAddressRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

func (x *GetPublicAddressRequest) GetSubaddressIndex() uint64 {
	if x != nil {
		return x.SubaddressIndex
	}
	return 0
}

type GetPublicAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicAddress *PublicAddress `protobuf:"bytes,1,opt,name=public_address,json=publicAddress,proto3" json:"public_address,omitempty"`
	B58Code       string         `protobuf:"bytes,2,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *GetPublicAddressResponse) Reset() {
	*x = GetPublicAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicAddressResponse) ProtoMessage() {}

func (x *GetPublicAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicAddressResponse.ProtoReflect.Descriptor instead.
func (*GetPublicAddressResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetPublicAddressResponse) GetPublicAddress() *PublicAddress {
	if x != nil {
		return x.PublicAddress
	}
	return nil
}

func (x *GetPublicAddressResponse) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

// Decode a base-58 encoded "MobileCoin Request Code" into receiver's public address, value, and memo.
type ParseRequestCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B58Code string `protobuf:"bytes,1,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *ParseRequestCodeRequest) Reset() {
	*x = ParseRequestCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRequestCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequestCodeRequest) ProtoMessage() {}

func (x *ParseRequestCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequestCodeRequest.ProtoReflect.Descriptor instead.
func (*ParseRequestCodeRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{20}
}

func (x *ParseRequestCodeRequest) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

type ParseRequestCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver *PublicAddress `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Value    uint64         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Memo     string         `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *ParseRequestCodeResponse) Reset() {
	*x = ParseRequestCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRequestCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequestCodeResponse) ProtoMessage() {}

func (x *ParseRequestCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequestCodeResponse.ProtoReflect.Descriptor instead.
func (*ParseRequestCodeResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{21}
}

func (x *ParseRequestCodeResponse) GetReceiver() *PublicAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *ParseRequestCodeResponse) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ParseRequestCodeResponse) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// Encode receiver's public address, value, and memo into a base-58 "MobileCoin Request Code".
type CreateRequestCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver *PublicAddress `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Value    uint64         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Memo     string         `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *CreateRequestCodeRequest) Reset() {
	*x = CreateRequestCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequestCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequestCodeRequest) ProtoMessage() {}

func (x *CreateRequestCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequestCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateRequestCodeRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{22}
}

func (x *CreateRequestCodeRequest) GetReceiver() *PublicAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *CreateRequestCodeRequest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CreateRequestCodeRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type CreateRequestCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B58Code string `protobuf:"bytes,1,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *CreateRequestCodeResponse) Reset() {
	*x = CreateRequestCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequestCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequestCodeResponse) ProtoMessage() {}

func (x *CreateRequestCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequestCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateRequestCodeResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{23}
}

func (x *CreateRequestCodeResponse) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

// Decode a base-58 encoded "MobileCoin Transfer Code" into entropy/tx_public_key/memo.
// This code provides a mobile client with everything required to construct a self-payment, allowing funds to be withdrawn from a gift card.
type ParseTransferCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B58Code string `protobuf:"bytes,1,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *ParseTransferCodeRequest) Reset() {
	*x = ParseTransferCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTransferCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTransferCodeRequest) ProtoMessage() {}

func (x *ParseTransferCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTransferCodeRequest.ProtoReflect.Descriptor instead.
func (*ParseTransferCodeRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{24}
}

func (x *ParseTransferCodeRequest) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

type ParseTransferCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entropy     []byte               `protobuf:"bytes,1,opt,name=entropy,proto3" json:"entropy,omitempty"`
	TxPublicKey *CompressedRistretto `protobuf:"bytes,2,opt,name=tx_public_key,json=txPublicKey,proto3" json:"tx_public_key,omitempty"`
	Memo        string               `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	Utxo        *UnspentTxOut        `protobuf:"bytes,4,opt,name=utxo,proto3" json:"utxo,omitempty"`
}

func (x *ParseTransferCodeResponse) Reset() {
	*x = ParseTransferCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTransferCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTransferCodeResponse) ProtoMessage() {}

func (x *ParseTransferCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTransferCodeResponse.ProtoReflect.Descriptor instead.
func (*ParseTransferCodeResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{25}
}

func (x *ParseTransferCodeResponse) GetEntropy() []byte {
	if x != nil {
		return x.Entropy
	}
	return nil
}

func (x *ParseTransferCodeResponse) GetTxPublicKey() *CompressedRistretto {
	if x != nil {
		return x.TxPublicKey
	}
	return nil
}

func (x *ParseTransferCodeResponse) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ParseTransferCodeResponse) GetUtxo() *UnspentTxOut {
	if x != nil {
		return x.Utxo
	}
	return nil
}

// Encode entropy/tx_public_key/memo into a base-58 "MobileCoin Transfer Code".
type CreateTransferCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entropy     []byte               `protobuf:"bytes,1,opt,name=entropy,proto3" json:"entropy,omitempty"`
	TxPublicKey *CompressedRistretto `protobuf:"bytes,2,opt,name=tx_public_key,json=txPublicKey,proto3" json:"tx_public_key,omitempty"`
	Memo        string               `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *CreateTransferCodeRequest) Reset() {
	*x = CreateTransferCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferCodeRequest) ProtoMessage() {}

func (x *CreateTransferCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferCodeRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{26}
}

func (x *CreateTransferCodeRequest) GetEntropy() []byte {
	if x != nil {
		return x.Entropy
	}
	return nil
}

func (x *CreateTransferCodeRequest) GetTxPublicKey() *CompressedRistretto {
	if x != nil {
		return x.TxPublicKey
	}
	return nil
}

func (x *CreateTransferCodeRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type CreateTransferCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B58Code string `protobuf:"bytes,1,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *CreateTransferCodeResponse) Reset() {
	*x = CreateTransferCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferCodeResponse) ProtoMessage() {}

func (x *CreateTransferCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateTransferCodeResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{27}
}

func (x *CreateTransferCodeResponse) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

// Decode a base-58 encoded "MobileCoin Address Code" into the receiver's public address.
type ParseAddressCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B58Code string `protobuf:"bytes,1,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *ParseAddressCodeRequest) Reset() {
	*x = ParseAddressCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseAddressCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseAddressCodeRequest) ProtoMessage() {}

func (x *ParseAddressCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseAddressCodeRequest.ProtoReflect.Descriptor instead.
func (*ParseAddressCodeRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{28}
}

func (x *ParseAddressCodeRequest) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

type ParseAddressCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver *PublicAddress `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *ParseAddressCodeResponse) Reset() {
	*x = ParseAddressCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseAddressCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseAddressCodeResponse) ProtoMessage() {}

func (x *ParseAddressCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseAddressCodeResponse.ProtoReflect.Descriptor instead.
func (*ParseAddressCodeResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{29}
}

func (x *ParseAddressCodeResponse) GetReceiver() *PublicAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

// Encode receiver's public address into a base-58 "MobileCoin Address Code".
type CreateAddressCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver *PublicAddress `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *CreateAddressCodeRequest) Reset() {
	*x = CreateAddressCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodeRequest) ProtoMessage() {}

func (x *CreateAddressCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressCodeRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{30}
}

func (x *CreateAddressCodeRequest) GetReceiver() *PublicAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

type CreateAddressCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B58Code string `protobuf:"bytes,1,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *CreateAddressCodeResponse) Reset() {
	*x = CreateAddressCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodeResponse) ProtoMessage() {}

func (x *CreateAddressCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateAddressCodeResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{31}
}

func (x *CreateAddressCodeResponse) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

// Generate a transaction proposal object.
// Notes:
// - Sum of inputs needs to be greater than sum of outlays and fee.
// - The set of inputs to use would be chosen automatically by mobilecoind.
// - The fee field could be set to zero, in which case mobilecoind would choose a fee.
// Right now that fee is hardcoded.
type GenerateTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monitor id sending the funds.
	SenderMonitorId []byte `protobuf:"bytes,1,opt,name=sender_monitor_id,json=senderMonitorId,proto3" json:"sender_monitor_id,omitempty"`
	// Subaddress to return change to.
	ChangeSubaddress uint64 `protobuf:"varint,2,opt,name=change_subaddress,json=changeSubaddress,proto3" json:"change_subaddress,omitempty"`
	// List of UnspentTxOuts to be spent by the transaction.
	// All UnspentTxOuts must belong to the same sender_monitor_id.
	// mobilecoind would choose a subset of these inputs to construct the transaction.
	// Total input amount must be >= sum of outlays + fees.
	InputList []*UnspentTxOut `protobuf:"bytes,3,rep,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`
	// Outputs to be generated by the transaction. This excludes change and fee.
	OutlayList []*Outlay `protobuf:"bytes,4,rep,name=outlay_list,json=outlayList,proto3" json:"outlay_list,omitempty"`
	// Fee in picoMOB (setting to 0 causes mobilecoind to choose a value).
	// The value used can be checked (but not changed) in tx_proposal.tx.prefix.fee
	Fee uint64 `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	// Tombstone block (setting to 0 causes mobilecoind to choose a value).
	// The value used can be checked (but not changed) in tx_proposal.tx.prefix.tombstone_block
	Tombstone uint64 `protobuf:"varint,6,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
}

func (x *GenerateTxRequest) Reset() {
	*x = GenerateTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTxRequest) ProtoMessage() {}

func (x *GenerateTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTxRequest.ProtoReflect.Descriptor instead.
func (*GenerateTxRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{32}
}

func (x *GenerateTxRequest) GetSenderMonitorId() []byte {
	if x != nil {
		return x.SenderMonitorId
	}
	return nil
}

func (x *GenerateTxRequest) GetChangeSubaddress() uint64 {
	if x != nil {
		return x.ChangeSubaddress
	}
	return 0
}

func (x *GenerateTxRequest) GetInputList() []*UnspentTxOut {
	if x != nil {
		return x.InputList
	}
	return nil
}

func (x *GenerateTxRequest) GetOutlayList() []*Outlay {
	if x != nil {
		return x.OutlayList
	}
	return nil
}

func (x *GenerateTxRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *GenerateTxRequest) GetTombstone() uint64 {
	if x != nil {
		return x.Tombstone
	}
	return 0
}

type GenerateTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxProposal *TxProposal `protobuf:"bytes,1,opt,name=tx_proposal,json=txProposal,proto3" json:"tx_proposal,omitempty"`
}

func (x *GenerateTxResponse) Reset() {
	*x = GenerateTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTxResponse) ProtoMessage() {}

func (x *GenerateTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTxResponse.ProtoReflect.Descriptor instead.
func (*GenerateTxResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{33}
}

func (x *GenerateTxResponse) GetTxProposal() *TxProposal {
	if x != nil {
		return x.TxProposal
	}
	return nil
}

// Generate a transaction that merges a few UnspentTxOuts into one, in order to reduce wallet fragmentation.
type GenerateOptimizationTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monitor Id to operate on.
	MonitorId []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	// Subaddress to operate on.
	Subaddress uint64 `protobuf:"varint,2,opt,name=subaddress,proto3" json:"subaddress,omitempty"`
}

func (x *GenerateOptimizationTxRequest) Reset() {
	*x = GenerateOptimizationTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOptimizationTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOptimizationTxRequest) ProtoMessage() {}

func (x *GenerateOptimizationTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOptimizationTxRequest.ProtoReflect.Descriptor instead.
func (*GenerateOptimizationTxRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{34}
}

func (x *GenerateOptimizationTxRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

func (x *GenerateOptimizationTxRequest) GetSubaddress() uint64 {
	if x != nil {
		return x.Subaddress
	}
	return 0
}

type GenerateOptimizationTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxProposal *TxProposal `protobuf:"bytes,1,opt,name=tx_proposal,json=txProposal,proto3" json:"tx_proposal,omitempty"`
}

func (x *GenerateOptimizationTxResponse) Reset() {
	*x = GenerateOptimizationTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOptimizationTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOptimizationTxResponse) ProtoMessage() {}

func (x *GenerateOptimizationTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOptimizationTxResponse.ProtoReflect.Descriptor instead.
func (*GenerateOptimizationTxResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{35}
}

func (x *GenerateOptimizationTxResponse) GetTxProposal() *TxProposal {
	if x != nil {
		return x.TxProposal
	}
	return nil
}

// Generate a transaction that can be used for a "MobileCoin Transfer Code"
type GenerateTransferCodeTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderMonitorId  []byte          `protobuf:"bytes,1,opt,name=sender_monitor_id,json=senderMonitorId,proto3" json:"sender_monitor_id,omitempty"`
	ChangeSubaddress uint64          `protobuf:"varint,2,opt,name=change_subaddress,json=changeSubaddress,proto3" json:"change_subaddress,omitempty"`
	InputList        []*UnspentTxOut `protobuf:"bytes,3,rep,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`
	Value            uint64          `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Fee              uint64          `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	Tombstone        uint64          `protobuf:"varint,6,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	Memo             string          `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *GenerateTransferCodeTxRequest) Reset() {
	*x = GenerateTransferCodeTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTransferCodeTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTransferCodeTxRequest) ProtoMessage() {}

func (x *GenerateTransferCodeTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTransferCodeTxRequest.ProtoReflect.Descriptor instead.
func (*GenerateTransferCodeTxRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{36}
}

func (x *GenerateTransferCodeTxRequest) GetSenderMonitorId() []byte {
	if x != nil {
		return x.SenderMonitorId
	}
	return nil
}

func (x *GenerateTransferCodeTxRequest) GetChangeSubaddress() uint64 {
	if x != nil {
		return x.ChangeSubaddress
	}
	return 0
}

func (x *GenerateTransferCodeTxRequest) GetInputList() []*UnspentTxOut {
	if x != nil {
		return x.InputList
	}
	return nil
}

func (x *GenerateTransferCodeTxRequest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GenerateTransferCodeTxRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *GenerateTransferCodeTxRequest) GetTombstone() uint64 {
	if x != nil {
		return x.Tombstone
	}
	return 0
}

func (x *GenerateTransferCodeTxRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type GenerateTransferCodeTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tx proposal to submit to the network.
	TxProposal *TxProposal `protobuf:"bytes,1,opt,name=tx_proposal,json=txProposal,proto3" json:"tx_proposal,omitempty"`
	// The entropy for constructing the AccountKey that can access the funds.
	Entropy []byte `protobuf:"bytes,2,opt,name=entropy,proto3" json:"entropy,omitempty"`
	// The TxOut public key that has the funds.
	TxPublicKey *CompressedRistretto `protobuf:"bytes,3,opt,name=tx_public_key,json=txPublicKey,proto3" json:"tx_public_key,omitempty"`
	// The memo (simply copied from the request).
	Memo string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	// The b58-encoded Transfer Code
	B58Code string `protobuf:"bytes,5,opt,name=b58_code,json=b58Code,proto3" json:"b58_code,omitempty"`
}

func (x *GenerateTransferCodeTxResponse) Reset() {
	*x = GenerateTransferCodeTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTransferCodeTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTransferCodeTxResponse) ProtoMessage() {}

func (x *GenerateTransferCodeTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTransferCodeTxResponse.ProtoReflect.Descriptor instead.
func (*GenerateTransferCodeTxResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{37}
}

func (x *GenerateTransferCodeTxResponse) GetTxProposal() *TxProposal {
	if x != nil {
		return x.TxProposal
	}
	return nil
}

func (x *GenerateTransferCodeTxResponse) GetEntropy() []byte {
	if x != nil {
		return x.Entropy
	}
	return nil
}

func (x *GenerateTransferCodeTxResponse) GetTxPublicKey() *CompressedRistretto {
	if x != nil {
		return x.TxPublicKey
	}
	return nil
}

func (x *GenerateTransferCodeTxResponse) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GenerateTransferCodeTxResponse) GetB58Code() string {
	if x != nil {
		return x.B58Code
	}
	return ""
}

// Generate a transaction without a monitor, requires an account key and
// a list of UnspentTxOuts. All coins (minus the fee) are transferred to
// a single recipient. Used for temporary accounts like gift codes.
type GenerateTxFromTxOutListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account key that owns the transactions
	AccountKey *AccountKey `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	// List of TxOuts to spend
	InputList []*UnspentTxOut `protobuf:"bytes,2,rep,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`
	// Address to transfer coins to
	Receiver *PublicAddress `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Fee
	Fee uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *GenerateTxFromTxOutListRequest) Reset() {
	*x = GenerateTxFromTxOutListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTxFromTxOutListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTxFromTxOutListRequest) ProtoMessage() {}

func (x *GenerateTxFromTxOutListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTxFromTxOutListRequest.ProtoReflect.Descriptor instead.
func (*GenerateTxFromTxOutListRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{38}
}

func (x *GenerateTxFromTxOutListRequest) GetAccountKey() *AccountKey {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

func (x *GenerateTxFromTxOutListRequest) GetInputList() []*UnspentTxOut {
	if x != nil {
		return x.InputList
	}
	return nil
}

func (x *GenerateTxFromTxOutListRequest) GetReceiver() *PublicAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *GenerateTxFromTxOutListRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type GenerateTxFromTxOutListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxProposal *TxProposal `protobuf:"bytes,1,opt,name=tx_proposal,json=txProposal,proto3" json:"tx_proposal,omitempty"`
}

func (x *GenerateTxFromTxOutListResponse) Reset() {
	*x = GenerateTxFromTxOutListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTxFromTxOutListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTxFromTxOutListResponse) ProtoMessage() {}

func (x *GenerateTxFromTxOutListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTxFromTxOutListResponse.ProtoReflect.Descriptor instead.
func (*GenerateTxFromTxOutListResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{39}
}

func (x *GenerateTxFromTxOutListResponse) GetTxProposal() *TxProposal {
	if x != nil {
		return x.TxProposal
	}
	return nil
}

// Submits a transaction to the network.
type SubmitTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxProposal *TxProposal `protobuf:"bytes,1,opt,name=tx_proposal,json=txProposal,proto3" json:"tx_proposal,omitempty"`
}

func (x *SubmitTxRequest) Reset() {
	*x = SubmitTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxRequest) ProtoMessage() {}

func (x *SubmitTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxRequest.ProtoReflect.Descriptor instead.
func (*SubmitTxRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{40}
}

func (x *SubmitTxRequest) GetTxProposal() *TxProposal {
	if x != nil {
		return x.TxProposal
	}
	return nil
}

type SubmitTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderTxReceipt       *SenderTxReceipt     `protobuf:"bytes,1,opt,name=sender_tx_receipt,json=senderTxReceipt,proto3" json:"sender_tx_receipt,omitempty"`
	ReceiverTxReceiptList []*ReceiverTxReceipt `protobuf:"bytes,2,rep,name=receiver_tx_receipt_list,json=receiverTxReceiptList,proto3" json:"receiver_tx_receipt_list,omitempty"`
}

func (x *SubmitTxResponse) Reset() {
	*x = SubmitTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxResponse) ProtoMessage() {}

func (x *SubmitTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxResponse.ProtoReflect.Descriptor instead.
func (*SubmitTxResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{41}
}

func (x *SubmitTxResponse) GetSenderTxReceipt() *SenderTxReceipt {
	if x != nil {
		return x.SenderTxReceipt
	}
	return nil
}

func (x *SubmitTxResponse) GetReceiverTxReceiptList() []*ReceiverTxReceipt {
	if x != nil {
		return x.ReceiverTxReceiptList
	}
	return nil
}

// Get information about the downloaded ledger.
// - empty request
type GetLedgerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of blocks in the ledger.
	BlockCount uint64 `protobuf:"varint,1,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
	// Total number of TxOuts in the ledger.
	TxoCount uint64 `protobuf:"varint,2,opt,name=txo_count,json=txoCount,proto3" json:"txo_count,omitempty"`
}

func (x *GetLedgerInfoResponse) Reset() {
	*x = GetLedgerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLedgerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLedgerInfoResponse) ProtoMessage() {}

func (x *GetLedgerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLedgerInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLedgerInfoResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{42}
}

func (x *GetLedgerInfoResponse) GetBlockCount() uint64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *GetLedgerInfoResponse) GetTxoCount() uint64 {
	if x != nil {
		return x.TxoCount
	}
	return 0
}

// Get information about a downloaded block.
type GetBlockInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockInfoRequest) Reset() {
	*x = GetBlockInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoRequest) ProtoMessage() {}

func (x *GetBlockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{43}
}

func (x *GetBlockInfoRequest) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

type GetBlockInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of key images in the block.
	KeyImageCount uint64 `protobuf:"varint,1,opt,name=key_image_count,json=keyImageCount,proto3" json:"key_image_count,omitempty"`
	// Number of TxOuts in the block.
	TxoCount uint64 `protobuf:"varint,2,opt,name=txo_count,json=txoCount,proto3" json:"txo_count,omitempty"`
}

func (x *GetBlockInfoResponse) Reset() {
	*x = GetBlockInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoResponse) ProtoMessage() {}

func (x *GetBlockInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockInfoResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{44}
}

func (x *GetBlockInfoResponse) GetKeyImageCount() uint64 {
	if x != nil {
		return x.KeyImageCount
	}
	return 0
}

func (x *GetBlockInfoResponse) GetTxoCount() uint64 {
	if x != nil {
		return x.TxoCount
	}
	return 0
}

type ArchiveBlockSignatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The origin of the Archive Block.
	SrcUrl string `protobuf:"bytes,1,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`
	// The archive filename.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// The block signature.
	Signature *BlockSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ArchiveBlockSignatureData) Reset() {
	*x = ArchiveBlockSignatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveBlockSignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveBlockSignatureData) ProtoMessage() {}

func (x *ArchiveBlockSignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveBlockSignatureData.ProtoReflect.Descriptor instead.
func (*ArchiveBlockSignatureData) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{45}
}

func (x *ArchiveBlockSignatureData) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *ArchiveBlockSignatureData) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ArchiveBlockSignatureData) GetSignature() *BlockSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Get more detailed information about a downloaded block
type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{46}
}

func (x *GetBlockRequest) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

type GetBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block
	Block *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// Signatures for this block
	Signatures []*ArchiveBlockSignatureData `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Key images in the block
	KeyImages []*KeyImage `protobuf:"bytes,3,rep,name=key_images,json=keyImages,proto3" json:"key_images,omitempty"`
	// TxOuts in the block.
	Txos []*TxOut `protobuf:"bytes,4,rep,name=txos,proto3" json:"txos,omitempty"`
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{47}
}

func (x *GetBlockResponse) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *GetBlockResponse) GetSignatures() []*ArchiveBlockSignatureData {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *GetBlockResponse) GetKeyImages() []*KeyImage {
	if x != nil {
		return x.KeyImages
	}
	return nil
}

func (x *GetBlockResponse) GetTxos() []*TxOut {
	if x != nil {
		return x.Txos
	}
	return nil
}

// Get the status of a submitted transaction as the Sender (using the key image).
type GetTxStatusAsSenderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt *SenderTxReceipt `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *GetTxStatusAsSenderRequest) Reset() {
	*x = GetTxStatusAsSenderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxStatusAsSenderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxStatusAsSenderRequest) ProtoMessage() {}

func (x *GetTxStatusAsSenderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxStatusAsSenderRequest.ProtoReflect.Descriptor instead.
func (*GetTxStatusAsSenderRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{48}
}

func (x *GetTxStatusAsSenderRequest) GetReceipt() *SenderTxReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type GetTxStatusAsSenderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status TxStatus `protobuf:"varint,1,opt,name=status,proto3,enum=mobilecoind_api.TxStatus" json:"status,omitempty"`
}

func (x *GetTxStatusAsSenderResponse) Reset() {
	*x = GetTxStatusAsSenderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxStatusAsSenderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxStatusAsSenderResponse) ProtoMessage() {}

func (x *GetTxStatusAsSenderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxStatusAsSenderResponse.ProtoReflect.Descriptor instead.
func (*GetTxStatusAsSenderResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{49}
}

func (x *GetTxStatusAsSenderResponse) GetStatus() TxStatus {
	if x != nil {
		return x.Status
	}
	return TxStatus_Unknown
}

// Get the status of a submitted transaction as the Recipient (using the tx public key).
type GetTxStatusAsReceiverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt *ReceiverTxReceipt `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// Optionally pass in a monitor ID to validate confirmation number
	MonitorId []byte `protobuf:"bytes,2,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
}

func (x *GetTxStatusAsReceiverRequest) Reset() {
	*x = GetTxStatusAsReceiverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxStatusAsReceiverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxStatusAsReceiverRequest) ProtoMessage() {}

func (x *GetTxStatusAsReceiverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxStatusAsReceiverRequest.ProtoReflect.Descriptor instead.
func (*GetTxStatusAsReceiverRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{50}
}

func (x *GetTxStatusAsReceiverRequest) GetReceipt() *ReceiverTxReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *GetTxStatusAsReceiverRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

type GetTxStatusAsReceiverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status TxStatus `protobuf:"varint,1,opt,name=status,proto3,enum=mobilecoind_api.TxStatus" json:"status,omitempty"`
}

func (x *GetTxStatusAsReceiverResponse) Reset() {
	*x = GetTxStatusAsReceiverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxStatusAsReceiverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxStatusAsReceiverResponse) ProtoMessage() {}

func (x *GetTxStatusAsReceiverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxStatusAsReceiverResponse.ProtoReflect.Descriptor instead.
func (*GetTxStatusAsReceiverResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{51}
}

func (x *GetTxStatusAsReceiverResponse) GetStatus() TxStatus {
	if x != nil {
		return x.Status
	}
	return TxStatus_Unknown
}

// Get the contents of a processed block.
type GetProcessedBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monitor id to query data for.
	MonitorId []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	// Block number to query.
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetProcessedBlockRequest) Reset() {
	*x = GetProcessedBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessedBlockRequest) ProtoMessage() {}

func (x *GetProcessedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessedBlockRequest.ProtoReflect.Descriptor instead.
func (*GetProcessedBlockRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{52}
}

func (x *GetProcessedBlockRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

func (x *GetProcessedBlockRequest) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

type GetProcessedBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Processed tx output information that belongs to the requested monitor_id/block.
	TxOuts []*ProcessedTxOut `protobuf:"bytes,1,rep,name=tx_outs,json=txOuts,proto3" json:"tx_outs,omitempty"`
}

func (x *GetProcessedBlockResponse) Reset() {
	*x = GetProcessedBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessedBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessedBlockResponse) ProtoMessage() {}

func (x *GetProcessedBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessedBlockResponse.ProtoReflect.Descriptor instead.
func (*GetProcessedBlockResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{53}
}

func (x *GetProcessedBlockResponse) GetTxOuts() []*ProcessedTxOut {
	if x != nil {
		return x.TxOuts
	}
	return nil
}

// Get the block index containing a given TxOut public key.
type GetBlockIndexByTxPubKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The TxOut public key to look for.
	TxPublicKey *CompressedRistretto `protobuf:"bytes,1,opt,name=tx_public_key,json=txPublicKey,proto3" json:"tx_public_key,omitempty"`
}

func (x *GetBlockIndexByTxPubKeyRequest) Reset() {
	*x = GetBlockIndexByTxPubKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockIndexByTxPubKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockIndexByTxPubKeyRequest) ProtoMessage() {}

func (x *GetBlockIndexByTxPubKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockIndexByTxPubKeyRequest.ProtoReflect.Descriptor instead.
func (*GetBlockIndexByTxPubKeyRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{54}
}

func (x *GetBlockIndexByTxPubKeyRequest) GetTxPublicKey() *CompressedRistretto {
	if x != nil {
		return x.TxPublicKey
	}
	return nil
}

type GetBlockIndexByTxPubKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block index.
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockIndexByTxPubKeyResponse) Reset() {
	*x = GetBlockIndexByTxPubKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockIndexByTxPubKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockIndexByTxPubKeyResponse) ProtoMessage() {}

func (x *GetBlockIndexByTxPubKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockIndexByTxPubKeyResponse.ProtoReflect.Descriptor instead.
func (*GetBlockIndexByTxPubKeyResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{55}
}

func (x *GetBlockIndexByTxPubKeyResponse) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

// Get the balance for a given monitor and subadddress index, in picoMOB.
type GetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monitor id to query balance for.
	MonitorId []byte `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	// Subaddress to query balance for.
	SubaddressIndex uint64 `protobuf:"varint,2,opt,name=subaddress_index,json=subaddressIndex,proto3" json:"subaddress_index,omitempty"`
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{56}
}

func (x *GetBalanceRequest) GetMonitorId() []byte {
	if x != nil {
		return x.MonitorId
	}
	return nil
}

func (x *GetBalanceRequest) GetSubaddressIndex() uint64 {
	if x != nil {
		return x.SubaddressIndex
	}
	return 0
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of all utxos associated with the requested monitor_id/subaddress_index.
	Balance uint64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{57}
}

func (x *GetBalanceResponse) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// Build and submit a simple payment and return any change to the Sender's subaddress.
type SendPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monitor id sending the funds.
	SenderMonitorId []byte `protobuf:"bytes,1,opt,name=sender_monitor_id,json=senderMonitorId,proto3" json:"sender_monitor_id,omitempty"`
	// Subaddress the funds are coming from.
	SenderSubaddress uint64 `protobuf:"varint,2,opt,name=sender_subaddress,json=senderSubaddress,proto3" json:"sender_subaddress,omitempty"`
	// Outputs to be generated by the transaction. This excludes change and fee.
	OutlayList []*Outlay `protobuf:"bytes,3,rep,name=outlay_list,json=outlayList,proto3" json:"outlay_list,omitempty"`
	// Fee in picoMOB (setting to 0 causes mobilecoind to choose a value).
	// The value used can be checked (but not changed) in tx_proposal.tx.prefix.fee
	Fee uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// Tombstone block (setting to 0 causes mobilecoind to choose a value).
	// The value used can be checked (but not changed) in tx_proposal.tx.prefix.tombstone_block
	Tombstone uint64 `protobuf:"varint,5,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	// Optional: When selecting input UTXOs for the transaction, limit selection only to UTXOs whose
	// value is lower or equal to to this.
	MaxInputUtxoValue uint64 `protobuf:"varint,6,opt,name=max_input_utxo_value,json=maxInputUtxoValue,proto3" json:"max_input_utxo_value,omitempty"`
}

func (x *SendPaymentRequest) Reset() {
	*x = SendPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentRequest) ProtoMessage() {}

func (x *SendPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentRequest.ProtoReflect.Descriptor instead.
func (*SendPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{58}
}

func (x *SendPaymentRequest) GetSenderMonitorId() []byte {
	if x != nil {
		return x.SenderMonitorId
	}
	return nil
}

func (x *SendPaymentRequest) GetSenderSubaddress() uint64 {
	if x != nil {
		return x.SenderSubaddress
	}
	return 0
}

func (x *SendPaymentRequest) GetOutlayList() []*Outlay {
	if x != nil {
		return x.OutlayList
	}
	return nil
}

func (x *SendPaymentRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SendPaymentRequest) GetTombstone() uint64 {
	if x != nil {
		return x.Tombstone
	}
	return 0
}

func (x *SendPaymentRequest) GetMaxInputUtxoValue() uint64 {
	if x != nil {
		return x.MaxInputUtxoValue
	}
	return 0
}

type SendPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information the sender can use to check if the transaction landed in the ledger.
	SenderTxReceipt *SenderTxReceipt `protobuf:"bytes,1,opt,name=sender_tx_receipt,json=senderTxReceipt,proto3" json:"sender_tx_receipt,omitempty"`
	// Information receivers can use to check if the transaction landed in the ledger.
	ReceiverTxReceiptList []*ReceiverTxReceipt `protobuf:"bytes,2,rep,name=receiver_tx_receipt_list,json=receiverTxReceiptList,proto3" json:"receiver_tx_receipt_list,omitempty"`
	// The TxProposal that was submitted to the network. The fee that was paid can be checked at
	// tx_proposal.tx.prefix.fee
	TxProposal *TxProposal `protobuf:"bytes,3,opt,name=tx_proposal,json=txProposal,proto3" json:"tx_proposal,omitempty"`
}

func (x *SendPaymentResponse) Reset() {
	*x = SendPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentResponse) ProtoMessage() {}

func (x *SendPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentResponse.ProtoReflect.Descriptor instead.
func (*SendPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{59}
}

func (x *SendPaymentResponse) GetSenderTxReceipt() *SenderTxReceipt {
	if x != nil {
		return x.SenderTxReceipt
	}
	return nil
}

func (x *SendPaymentResponse) GetReceiverTxReceiptList() []*ReceiverTxReceipt {
	if x != nil {
		return x.ReceiverTxReceiptList
	}
	return nil
}

func (x *SendPaymentResponse) GetTxProposal() *TxProposal {
	if x != nil {
		return x.TxProposal
	}
	return nil
}

// Build and submit a simple payment to an address provided by a b58 address code
type PayAddressCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monitor id sending the funds.
	SenderMonitorId []byte `protobuf:"bytes,1,opt,name=sender_monitor_id,json=senderMonitorId,proto3" json:"sender_monitor_id,omitempty"`
	// Subaddress the funds are coming from.
	SenderSubaddress uint64 `protobuf:"varint,2,opt,name=sender_subaddress,json=senderSubaddress,proto3" json:"sender_subaddress,omitempty"`
	// Base-58 encoded "MobileCoin Address Code"
	ReceiverB58Code string `protobuf:"bytes,3,opt,name=receiver_b58_code,json=receiverB58Code,proto3" json:"receiver_b58_code,omitempty"`
	// Amount to pay
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Fee in picoMOB (setting to 0 causes mobilecoind to choose a value).
	// The value used can be checked (but not changed) in tx_proposal.tx.prefix.fee
	Fee uint64 `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	// Tombstone block (setting to 0 causes mobilecoind to choose a value).
	// The value used can be checked (but not changed) in tx_proposal.tx.prefix.tombstone_block
	Tombstone uint64 `protobuf:"varint,6,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	// Optional: When selecting input UTXOs for the transaction, limit selection only to UTXOs whose
	// value is lower or equal to to this.
	MaxInputUtxoValue uint64 `protobuf:"varint,7,opt,name=max_input_utxo_value,json=maxInputUtxoValue,proto3" json:"max_input_utxo_value,omitempty"`
}

func (x *PayAddressCodeRequest) Reset() {
	*x = PayAddressCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayAddressCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAddressCodeRequest) ProtoMessage() {}

func (x *PayAddressCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAddressCodeRequest.ProtoReflect.Descriptor instead.
func (*PayAddressCodeRequest) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{60}
}

func (x *PayAddressCodeRequest) GetSenderMonitorId() []byte {
	if x != nil {
		return x.SenderMonitorId
	}
	return nil
}

func (x *PayAddressCodeRequest) GetSenderSubaddress() uint64 {
	if x != nil {
		return x.SenderSubaddress
	}
	return 0
}

func (x *PayAddressCodeRequest) GetReceiverB58Code() string {
	if x != nil {
		return x.ReceiverB58Code
	}
	return ""
}

func (x *PayAddressCodeRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayAddressCodeRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *PayAddressCodeRequest) GetTombstone() uint64 {
	if x != nil {
		return x.Tombstone
	}
	return 0
}

func (x *PayAddressCodeRequest) GetMaxInputUtxoValue() uint64 {
	if x != nil {
		return x.MaxInputUtxoValue
	}
	return 0
}

// Get information about the network.
// - empty request
type GetNetworkStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total highest block number the network agrees on.
	// (This is the block number we will try to sync to).
	NetworkHighestBlockIndex uint64 `protobuf:"varint,1,opt,name=network_highest_block_index,json=networkHighestBlockIndex,proto3" json:"network_highest_block_index,omitempty"`
	// A map of node responder id to the block index reported by it.
	PeerBlockIndexMap map[string]uint64 `protobuf:"bytes,2,rep,name=peer_block_index_map,json=peerBlockIndexMap,proto3" json:"peer_block_index_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The local ledger block index.
	LocalBlockIndex uint64 `protobuf:"varint,3,opt,name=local_block_index,json=localBlockIndex,proto3" json:"local_block_index,omitempty"`
	// Whether we are behind.
	IsBehind bool `protobuf:"varint,4,opt,name=is_behind,json=isBehind,proto3" json:"is_behind,omitempty"`
}

func (x *GetNetworkStatusResponse) Reset() {
	*x = GetNetworkStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mobilecoind_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkStatusResponse) ProtoMessage() {}

func (x *GetNetworkStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mobilecoind_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkStatusResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkStatusResponse) Descriptor() ([]byte, []int) {
	return file_mobilecoind_api_proto_rawDescGZIP(), []int{61}
}

func (x *GetNetworkStatusResponse) GetNetworkHighestBlockIndex() uint64 {
	if x != nil {
		return x.NetworkHighestBlockIndex
	}
	return 0
}

func (x *GetNetworkStatusResponse) GetPeerBlockIndexMap() map[string]uint64 {
	if x != nil {
		return x.PeerBlockIndexMap
	}
	return nil
}

func (x *GetNetworkStatusResponse) GetLocalBlockIndex() uint64 {
	if x != nil {
		return x.LocalBlockIndex
	}
	return 0
}

func (x *GetNetworkStatusResponse) GetIsBehind() bool {
	if x != nil {
		return x.IsBehind
	}
	return false
}

var File_mobilecoind_api_proto protoreflect.FileDescriptor

var file_mobilecoind_api_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x6c, 0x61,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0xb9, 0x02, 0x0a,
	0x0c, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a,
	0x06, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x05,
	0x74, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b,
	0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x03, 0x0a, 0x0a, 0x54, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74,
	0x6c, 0x61, 0x79, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x77, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x17, 0x6f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x19, 0x6f,
	0x75, 0x74, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x4a, 0x0a, 0x1c, 0x4f, 0x75, 0x74, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x22,
	0xfc, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d,
	0x74, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74,
	0x74, 0x6f, 0x52, 0x0b, 0x74, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf0,
	0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x53, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xca, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74,
	0x6f, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd5,
	0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75,
	0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x22, 0x35, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x5d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x6f, 0x70, 0x79, 0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x22, 0x4e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x63, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x75, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x35, 0x38, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x35, 0x38, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x35, 0x38, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x35, 0x38, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x18, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x79, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22,
	0x36, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x35, 0x38, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x35, 0x38, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x35, 0x38, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x35, 0x38, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbf,
	0x01, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0b, 0x74, 0x78,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x31, 0x0a,
	0x04, 0x75, 0x74, 0x78, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x04, 0x75, 0x74, 0x78, 0x6f,
	0x22, 0x8c, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0b,
	0x74, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22,
	0x37, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x35, 0x38, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x35, 0x38, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x35, 0x38, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x35, 0x38, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f,
	0x0a, 0x18, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22,
	0x4f, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x22, 0x36, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x35, 0x38, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x35, 0x38, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74,
	0x6c, 0x61, 0x79, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x22,
	0x52, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x22, 0x90, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75,
	0x74, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xea, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x78, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f,
	0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70,
	0x79, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x69,
	0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0b, 0x74, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x35, 0x38, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x35, 0x38, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x22, 0x5f, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x78,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x78, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x15, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x78, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x78, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x78, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xdf, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6b,
	0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x78, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x04, 0x74, 0x78, 0x6f, 0x73, 0x22, 0x58, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x50, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x55, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6f,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x06, 0x74, 0x78, 0x4f, 0x75,
	0x74, 0x73, 0x22, 0x63, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x79, 0x54, 0x78, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x52, 0x69, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x52, 0x0b, 0x74, 0x78, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x37, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79, 0x54, 0x78, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x88, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x61, 0x79, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x74, 0x78, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x5b, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52,
	0x0a, 0x74, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x95, 0x02, 0x0a, 0x15,
	0x50, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x35, 0x38, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x42, 0x35, 0x38, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x75, 0x74, 0x78, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x71, 0x0a, 0x14, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x70, 0x65, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d,
	0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x1a, 0x44, 0x0a, 0x16, 0x50,
	0x65, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0x60, 0x0a, 0x08, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x6f, 0x6d, 0x62,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x03, 0x2a, 0x3f, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x65,
	0x6e, 0x74, 0x10, 0x02, 0x32, 0x9b, 0x18, 0x0a, 0x0e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x41, 0x50, 0x49, 0x12, 0x57, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x12, 0x2e,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7b, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x78, 0x12, 0x2e, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x08, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x20, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x41, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x41, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x79, 0x54, 0x78, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79, 0x54,
	0x78, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79,
	0x54, 0x78, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x33, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x42, 0x0e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x41, 0x50, 0x49,
	0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mobilecoind_api_proto_rawDescOnce sync.Once
	file_mobilecoind_api_proto_rawDescData = file_mobilecoind_api_proto_rawDesc
)

func file_mobilecoind_api_proto_rawDescGZIP() []byte {
	file_mobilecoind_api_proto_rawDescOnce.Do(func() {
		file_mobilecoind_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_mobilecoind_api_proto_rawDescData)
	})
	return file_mobilecoind_api_proto_rawDescData
}

var file_mobilecoind_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mobilecoind_api_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_mobilecoind_api_proto_goTypes = []interface{}{
	(TxStatus)(0),                           // 0: mobilecoind_api.TxStatus
	(ProcessedTxOutDirection)(0),            // 1: mobilecoind_api.ProcessedTxOutDirection
	(*Outlay)(nil),                          // 2: mobilecoind_api.Outlay
	(*UnspentTxOut)(nil),                    // 3: mobilecoind_api.UnspentTxOut
	(*TxProposal)(nil),                      // 4: mobilecoind_api.TxProposal
	(*SenderTxReceipt)(nil),                 // 5: mobilecoind_api.SenderTxReceipt
	(*ReceiverTxReceipt)(nil),               // 6: mobilecoind_api.ReceiverTxReceipt
	(*MonitorStatus)(nil),                   // 7: mobilecoind_api.MonitorStatus
	(*ProcessedTxOut)(nil),                  // 8: mobilecoind_api.ProcessedTxOut
	(*AddMonitorRequest)(nil),               // 9: mobilecoind_api.AddMonitorRequest
	(*AddMonitorResponse)(nil),              // 10: mobilecoind_api.AddMonitorResponse
	(*RemoveMonitorRequest)(nil),            // 11: mobilecoind_api.RemoveMonitorRequest
	(*GetMonitorListResponse)(nil),          // 12: mobilecoind_api.GetMonitorListResponse
	(*GetMonitorStatusRequest)(nil),         // 13: mobilecoind_api.GetMonitorStatusRequest
	(*GetMonitorStatusResponse)(nil),        // 14: mobilecoind_api.GetMonitorStatusResponse
	(*GetUnspentTxOutListRequest)(nil),      // 15: mobilecoind_api.GetUnspentTxOutListRequest
	(*GetUnspentTxOutListResponse)(nil),     // 16: mobilecoind_api.GetUnspentTxOutListResponse
	(*GenerateEntropyResponse)(nil),         // 17: mobilecoind_api.GenerateEntropyResponse
	(*GetAccountKeyRequest)(nil),            // 18: mobilecoind_api.GetAccountKeyRequest
	(*GetAccountKeyResponse)(nil),           // 19: mobilecoind_api.GetAccountKeyResponse
	(*GetPublicAddressRequest)(nil),         // 20: mobilecoind_api.GetPublicAddressRequest
	(*GetPublicAddressResponse)(nil),        // 21: mobilecoind_api.GetPublicAddressResponse
	(*ParseRequestCodeRequest)(nil),         // 22: mobilecoind_api.ParseRequestCodeRequest
	(*ParseRequestCodeResponse)(nil),        // 23: mobilecoind_api.ParseRequestCodeResponse
	(*CreateRequestCodeRequest)(nil),        // 24: mobilecoind_api.CreateRequestCodeRequest
	(*CreateRequestCodeResponse)(nil),       // 25: mobilecoind_api.CreateRequestCodeResponse
	(*ParseTransferCodeRequest)(nil),        // 26: mobilecoind_api.ParseTransferCodeRequest
	(*ParseTransferCodeResponse)(nil),       // 27: mobilecoind_api.ParseTransferCodeResponse
	(*CreateTransferCodeRequest)(nil),       // 28: mobilecoind_api.CreateTransferCodeRequest
	(*CreateTransferCodeResponse)(nil),      // 29: mobilecoind_api.CreateTransferCodeResponse
	(*ParseAddressCodeRequest)(nil),         // 30: mobilecoind_api.ParseAddressCodeRequest
	(*ParseAddressCodeResponse)(nil),        // 31: mobilecoind_api.ParseAddressCodeResponse
	(*CreateAddressCodeRequest)(nil),        // 32: mobilecoind_api.CreateAddressCodeRequest
	(*CreateAddressCodeResponse)(nil),       // 33: mobilecoind_api.CreateAddressCodeResponse
	(*GenerateTxRequest)(nil),               // 34: mobilecoind_api.GenerateTxRequest
	(*GenerateTxResponse)(nil),              // 35: mobilecoind_api.GenerateTxResponse
	(*GenerateOptimizationTxRequest)(nil),   // 36: mobilecoind_api.GenerateOptimizationTxRequest
	(*GenerateOptimizationTxResponse)(nil),  // 37: mobilecoind_api.GenerateOptimizationTxResponse
	(*GenerateTransferCodeTxRequest)(nil),   // 38: mobilecoind_api.GenerateTransferCodeTxRequest
	(*GenerateTransferCodeTxResponse)(nil),  // 39: mobilecoind_api.GenerateTransferCodeTxResponse
	(*GenerateTxFromTxOutListRequest)(nil),  // 40: mobilecoind_api.GenerateTxFromTxOutListRequest
	(*GenerateTxFromTxOutListResponse)(nil), // 41: mobilecoind_api.GenerateTxFromTxOutListResponse
	(*SubmitTxRequest)(nil),                 // 42: mobilecoind_api.SubmitTxRequest
	(*SubmitTxResponse)(nil),                // 43: mobilecoind_api.SubmitTxResponse
	(*GetLedgerInfoResponse)(nil),           // 44: mobilecoind_api.GetLedgerInfoResponse
	(*GetBlockInfoRequest)(nil),             // 45: mobilecoind_api.GetBlockInfoRequest
	(*GetBlockInfoResponse)(nil),            // 46: mobilecoind_api.GetBlockInfoResponse
	(*ArchiveBlockSignatureData)(nil),       // 47: mobilecoind_api.ArchiveBlockSignatureData
	(*GetBlockRequest)(nil),                 // 48: mobilecoind_api.GetBlockRequest
	(*GetBlockResponse)(nil),                // 49: mobilecoind_api.GetBlockResponse
	(*GetTxStatusAsSenderRequest)(nil),      // 50: mobilecoind_api.GetTxStatusAsSenderRequest
	(*GetTxStatusAsSenderResponse)(nil),     // 51: mobilecoind_api.GetTxStatusAsSenderResponse
	(*GetTxStatusAsReceiverRequest)(nil),    // 52: mobilecoind_api.GetTxStatusAsReceiverRequest
	(*GetTxStatusAsReceiverResponse)(nil),   // 53: mobilecoind_api.GetTxStatusAsReceiverResponse
	(*GetProcessedBlockRequest)(nil),        // 54: mobilecoind_api.GetProcessedBlockRequest
	(*GetProcessedBlockResponse)(nil),       // 55: mobilecoind_api.GetProcessedBlockResponse
	(*GetBlockIndexByTxPubKeyRequest)(nil),  // 56: mobilecoind_api.GetBlockIndexByTxPubKeyRequest
	(*GetBlockIndexByTxPubKeyResponse)(nil), // 57: mobilecoind_api.GetBlockIndexByTxPubKeyResponse
	(*GetBalanceRequest)(nil),               // 58: mobilecoind_api.GetBalanceRequest
	(*GetBalanceResponse)(nil),              // 59: mobilecoind_api.GetBalanceResponse
	(*SendPaymentRequest)(nil),              // 60: mobilecoind_api.SendPaymentRequest
	(*SendPaymentResponse)(nil),             // 61: mobilecoind_api.SendPaymentResponse
	(*PayAddressCodeRequest)(nil),           // 62: mobilecoind_api.PayAddressCodeRequest
	(*GetNetworkStatusResponse)(nil),        // 63: mobilecoind_api.GetNetworkStatusResponse
	nil,                                     // 64: mobilecoind_api.TxProposal.OutlayIndexToTxOutIndexEntry
	nil,                                     // 65: mobilecoind_api.GetNetworkStatusResponse.PeerBlockIndexMapEntry
	(*PublicAddress)(nil),                   // 66: external.PublicAddress
	(*TxOut)(nil),                           // 67: external.TxOut
	(*KeyImage)(nil),                        // 68: external.KeyImage
	(*Tx)(nil),                              // 69: external.Tx
	(*CompressedRistretto)(nil),             // 70: external.CompressedRistretto
	(*AccountKey)(nil),                      // 71: external.AccountKey
	(*BlockSignature)(nil),                  // 72: blockchain.BlockSignature
	(*Block)(nil),                           // 73: blockchain.Block
	(*empty.Empty)(nil),                     // 74: google.protobuf.Empty
}
var file_mobilecoind_api_proto_depIdxs = []int32{
	66, // 0: mobilecoind_api.Outlay.receiver:type_name -> external.PublicAddress
	67, // 1: mobilecoind_api.UnspentTxOut.tx_out:type_name -> external.TxOut
	68, // 2: mobilecoind_api.UnspentTxOut.key_image:type_name -> external.KeyImage
	3,  // 3: mobilecoind_api.TxProposal.input_list:type_name -> mobilecoind_api.UnspentTxOut
	2,  // 4: mobilecoind_api.TxProposal.outlay_list:type_name -> mobilecoind_api.Outlay
	69, // 5: mobilecoind_api.TxProposal.tx:type_name -> external.Tx
	64, // 6: mobilecoind_api.TxProposal.outlay_index_to_tx_out_index:type_name -> mobilecoind_api.TxProposal.OutlayIndexToTxOutIndexEntry
	68, // 7: mobilecoind_api.SenderTxReceipt.key_image_list:type_name -> external.KeyImage
	66, // 8: mobilecoind_api.ReceiverTxReceipt.recipient:type_name -> external.PublicAddress
	70, // 9: mobilecoind_api.ReceiverTxReceipt.tx_public_key:type_name -> external.CompressedRistretto
	71, // 10: mobilecoind_api.MonitorStatus.account_key:type_name -> external.AccountKey
	70, // 11: mobilecoind_api.ProcessedTxOut.public_key:type_name -> external.CompressedRistretto
	68, // 12: mobilecoind_api.ProcessedTxOut.key_image:type_name -> external.KeyImage
	1,  // 13: mobilecoind_api.ProcessedTxOut.direction:type_name -> mobilecoind_api.ProcessedTxOutDirection
	71, // 14: mobilecoind_api.AddMonitorRequest.account_key:type_name -> external.AccountKey
	7,  // 15: mobilecoind_api.GetMonitorStatusResponse.status:type_name -> mobilecoind_api.MonitorStatus
	3,  // 16: mobilecoind_api.GetUnspentTxOutListResponse.output_list:type_name -> mobilecoind_api.UnspentTxOut
	71, // 17: mobilecoind_api.GetAccountKeyResponse.account_key:type_name -> external.AccountKey
	66, // 18: mobilecoind_api.GetPublicAddressResponse.public_address:type_name -> external.PublicAddress
	66, // 19: mobilecoind_api.ParseRequestCodeResponse.receiver:type_name -> external.PublicAddress
	66, // 20: mobilecoind_api.CreateRequestCodeRequest.receiver:type_name -> external.PublicAddress
	70, // 21: mobilecoind_api.ParseTransferCodeResponse.tx_public_key:type_name -> external.CompressedRistretto
	3,  // 22: mobilecoind_api.ParseTransferCodeResponse.utxo:type_name -> mobilecoind_api.UnspentTxOut
	70, // 23: mobilecoind_api.CreateTransferCodeRequest.tx_public_key:type_name -> external.CompressedRistretto
	66, // 24: mobilecoind_api.ParseAddressCodeResponse.receiver:type_name -> external.PublicAddress
	66, // 25: mobilecoind_api.CreateAddressCodeRequest.receiver:type_name -> external.PublicAddress
	3,  // 26: mobilecoind_api.GenerateTxRequest.input_list:type_name -> mobilecoind_api.UnspentTxOut
	2,  // 27: mobilecoind_api.GenerateTxRequest.outlay_list:type_name -> mobilecoind_api.Outlay
	4,  // 28: mobilecoind_api.GenerateTxResponse.tx_proposal:type_name -> mobilecoind_api.TxProposal
	4,  // 29: mobilecoind_api.GenerateOptimizationTxResponse.tx_proposal:type_name -> mobilecoind_api.TxProposal
	3,  // 30: mobilecoind_api.GenerateTransferCodeTxRequest.input_list:type_name -> mobilecoind_api.UnspentTxOut
	4,  // 31: mobilecoind_api.GenerateTransferCodeTxResponse.tx_proposal:type_name -> mobilecoind_api.TxProposal
	70, // 32: mobilecoind_api.GenerateTransferCodeTxResponse.tx_public_key:type_name -> external.CompressedRistretto
	71, // 33: mobilecoind_api.GenerateTxFromTxOutListRequest.account_key:type_name -> external.AccountKey
	3,  // 34: mobilecoind_api.GenerateTxFromTxOutListRequest.input_list:type_name -> mobilecoind_api.UnspentTxOut
	66, // 35: mobilecoind_api.GenerateTxFromTxOutListRequest.receiver:type_name -> external.PublicAddress
	4,  // 36: mobilecoind_api.GenerateTxFromTxOutListResponse.tx_proposal:type_name -> mobilecoind_api.TxProposal
	4,  // 37: mobilecoind_api.SubmitTxRequest.tx_proposal:type_name -> mobilecoind_api.TxProposal
	5,  // 38: mobilecoind_api.SubmitTxResponse.sender_tx_receipt:type_name -> mobilecoind_api.SenderTxReceipt
	6,  // 39: mobilecoind_api.SubmitTxResponse.receiver_tx_receipt_list:type_name -> mobilecoind_api.ReceiverTxReceipt
	72, // 40: mobilecoind_api.ArchiveBlockSignatureData.signature:type_name -> blockchain.BlockSignature
	73, // 41: mobilecoind_api.GetBlockResponse.block:type_name -> blockchain.Block
	47, // 42: mobilecoind_api.GetBlockResponse.signatures:type_name -> mobilecoind_api.ArchiveBlockSignatureData
	68, // 43: mobilecoind_api.GetBlockResponse.key_images:type_name -> external.KeyImage
	67, // 44: mobilecoind_api.GetBlockResponse.txos:type_name -> external.TxOut
	5,  // 45: mobilecoind_api.GetTxStatusAsSenderRequest.receipt:type_name -> mobilecoind_api.SenderTxReceipt
	0,  // 46: mobilecoind_api.GetTxStatusAsSenderResponse.status:type_name -> mobilecoind_api.TxStatus
	6,  // 47: mobilecoind_api.GetTxStatusAsReceiverRequest.receipt:type_name -> mobilecoind_api.ReceiverTxReceipt
	0,  // 48: mobilecoind_api.GetTxStatusAsReceiverResponse.status:type_name -> mobilecoind_api.TxStatus
	8,  // 49: mobilecoind_api.GetProcessedBlockResponse.tx_outs:type_name -> mobilecoind_api.ProcessedTxOut
	70, // 50: mobilecoind_api.GetBlockIndexByTxPubKeyRequest.tx_public_key:type_name -> external.CompressedRistretto
	2,  // 51: mobilecoind_api.SendPaymentRequest.outlay_list:type_name -> mobilecoind_api.Outlay
	5,  // 52: mobilecoind_api.SendPaymentResponse.sender_tx_receipt:type_name -> mobilecoind_api.SenderTxReceipt
	6,  // 53: mobilecoind_api.SendPaymentResponse.receiver_tx_receipt_list:type_name -> mobilecoind_api.ReceiverTxReceipt
	4,  // 54: mobilecoind_api.SendPaymentResponse.tx_proposal:type_name -> mobilecoind_api.TxProposal
	65, // 55: mobilecoind_api.GetNetworkStatusResponse.peer_block_index_map:type_name -> mobilecoind_api.GetNetworkStatusResponse.PeerBlockIndexMapEntry
	9,  // 56: mobilecoind_api.MobilecoindAPI.AddMonitor:input_type -> mobilecoind_api.AddMonitorRequest
	11, // 57: mobilecoind_api.MobilecoindAPI.RemoveMonitor:input_type -> mobilecoind_api.RemoveMonitorRequest
	74, // 58: mobilecoind_api.MobilecoindAPI.GetMonitorList:input_type -> google.protobuf.Empty
	13, // 59: mobilecoind_api.MobilecoindAPI.GetMonitorStatus:input_type -> mobilecoind_api.GetMonitorStatusRequest
	15, // 60: mobilecoind_api.MobilecoindAPI.GetUnspentTxOutList:input_type -> mobilecoind_api.GetUnspentTxOutListRequest
	74, // 61: mobilecoind_api.MobilecoindAPI.GenerateEntropy:input_type -> google.protobuf.Empty
	18, // 62: mobilecoind_api.MobilecoindAPI.GetAccountKey:input_type -> mobilecoind_api.GetAccountKeyRequest
	20, // 63: mobilecoind_api.MobilecoindAPI.GetPublicAddress:input_type -> mobilecoind_api.GetPublicAddressRequest
	22, // 64: mobilecoind_api.MobilecoindAPI.ParseRequestCode:input_type -> mobilecoind_api.ParseRequestCodeRequest
	24, // 65: mobilecoind_api.MobilecoindAPI.CreateRequestCode:input_type -> mobilecoind_api.CreateRequestCodeRequest
	26, // 66: mobilecoind_api.MobilecoindAPI.ParseTransferCode:input_type -> mobilecoind_api.ParseTransferCodeRequest
	28, // 67: mobilecoind_api.MobilecoindAPI.CreateTransferCode:input_type -> mobilecoind_api.CreateTransferCodeRequest
	30, // 68: mobilecoind_api.MobilecoindAPI.ParseAddressCode:input_type -> mobilecoind_api.ParseAddressCodeRequest
	32, // 69: mobilecoind_api.MobilecoindAPI.CreateAddressCode:input_type -> mobilecoind_api.CreateAddressCodeRequest
	34, // 70: mobilecoind_api.MobilecoindAPI.GenerateTx:input_type -> mobilecoind_api.GenerateTxRequest
	36, // 71: mobilecoind_api.MobilecoindAPI.GenerateOptimizationTx:input_type -> mobilecoind_api.GenerateOptimizationTxRequest
	38, // 72: mobilecoind_api.MobilecoindAPI.GenerateTransferCodeTx:input_type -> mobilecoind_api.GenerateTransferCodeTxRequest
	40, // 73: mobilecoind_api.MobilecoindAPI.GenerateTxFromTxOutList:input_type -> mobilecoind_api.GenerateTxFromTxOutListRequest
	42, // 74: mobilecoind_api.MobilecoindAPI.SubmitTx:input_type -> mobilecoind_api.SubmitTxRequest
	74, // 75: mobilecoind_api.MobilecoindAPI.GetLedgerInfo:input_type -> google.protobuf.Empty
	45, // 76: mobilecoind_api.MobilecoindAPI.GetBlockInfo:input_type -> mobilecoind_api.GetBlockInfoRequest
	48, // 77: mobilecoind_api.MobilecoindAPI.GetBlock:input_type -> mobilecoind_api.GetBlockRequest
	50, // 78: mobilecoind_api.MobilecoindAPI.GetTxStatusAsSender:input_type -> mobilecoind_api.GetTxStatusAsSenderRequest
	52, // 79: mobilecoind_api.MobilecoindAPI.GetTxStatusAsReceiver:input_type -> mobilecoind_api.GetTxStatusAsReceiverRequest
	54, // 80: mobilecoind_api.MobilecoindAPI.GetProcessedBlock:input_type -> mobilecoind_api.GetProcessedBlockRequest
	56, // 81: mobilecoind_api.MobilecoindAPI.GetBlockIndexByTxPubKey:input_type -> mobilecoind_api.GetBlockIndexByTxPubKeyRequest
	58, // 82: mobilecoind_api.MobilecoindAPI.GetBalance:input_type -> mobilecoind_api.GetBalanceRequest
	60, // 83: mobilecoind_api.MobilecoindAPI.SendPayment:input_type -> mobilecoind_api.SendPaymentRequest
	62, // 84: mobilecoind_api.MobilecoindAPI.PayAddressCode:input_type -> mobilecoind_api.PayAddressCodeRequest
	74, // 85: mobilecoind_api.MobilecoindAPI.GetNetworkStatus:input_type -> google.protobuf.Empty
	10, // 86: mobilecoind_api.MobilecoindAPI.AddMonitor:output_type -> mobilecoind_api.AddMonitorResponse
	74, // 87: mobilecoind_api.MobilecoindAPI.RemoveMonitor:output_type -> google.protobuf.Empty
	12, // 88: mobilecoind_api.MobilecoindAPI.GetMonitorList:output_type -> mobilecoind_api.GetMonitorListResponse
	14, // 89: mobilecoind_api.MobilecoindAPI.GetMonitorStatus:output_type -> mobilecoind_api.GetMonitorStatusResponse
	16, // 90: mobilecoind_api.MobilecoindAPI.GetUnspentTxOutList:output_type -> mobilecoind_api.GetUnspentTxOutListResponse
	17, // 91: mobilecoind_api.MobilecoindAPI.GenerateEntropy:output_type -> mobilecoind_api.GenerateEntropyResponse
	19, // 92: mobilecoind_api.MobilecoindAPI.GetAccountKey:output_type -> mobilecoind_api.GetAccountKeyResponse
	21, // 93: mobilecoind_api.MobilecoindAPI.GetPublicAddress:output_type -> mobilecoind_api.GetPublicAddressResponse
	23, // 94: mobilecoind_api.MobilecoindAPI.ParseRequestCode:output_type -> mobilecoind_api.ParseRequestCodeResponse
	25, // 95: mobilecoind_api.MobilecoindAPI.CreateRequestCode:output_type -> mobilecoind_api.CreateRequestCodeResponse
	27, // 96: mobilecoind_api.MobilecoindAPI.ParseTransferCode:output_type -> mobilecoind_api.ParseTransferCodeResponse
	29, // 97: mobilecoind_api.MobilecoindAPI.CreateTransferCode:output_type -> mobilecoind_api.CreateTransferCodeResponse
	31, // 98: mobilecoind_api.MobilecoindAPI.ParseAddressCode:output_type -> mobilecoind_api.ParseAddressCodeResponse
	33, // 99: mobilecoind_api.MobilecoindAPI.CreateAddressCode:output_type -> mobilecoind_api.CreateAddressCodeResponse
	35, // 100: mobilecoind_api.MobilecoindAPI.GenerateTx:output_type -> mobilecoind_api.GenerateTxResponse
	37, // 101: mobilecoind_api.MobilecoindAPI.GenerateOptimizationTx:output_type -> mobilecoind_api.GenerateOptimizationTxResponse
	39, // 102: mobilecoind_api.MobilecoindAPI.GenerateTransferCodeTx:output_type -> mobilecoind_api.GenerateTransferCodeTxResponse
	41, // 103: mobilecoind_api.MobilecoindAPI.GenerateTxFromTxOutList:output_type -> mobilecoind_api.GenerateTxFromTxOutListResponse
	43, // 104: mobilecoind_api.MobilecoindAPI.SubmitTx:output_type -> mobilecoind_api.SubmitTxResponse
	44, // 105: mobilecoind_api.MobilecoindAPI.GetLedgerInfo:output_type -> mobilecoind_api.GetLedgerInfoResponse
	46, // 106: mobilecoind_api.MobilecoindAPI.GetBlockInfo:output_type -> mobilecoind_api.GetBlockInfoResponse
	49, // 107: mobilecoind_api.MobilecoindAPI.GetBlock:output_type -> mobilecoind_api.GetBlockResponse
	51, // 108: mobilecoind_api.MobilecoindAPI.GetTxStatusAsSender:output_type -> mobilecoind_api.GetTxStatusAsSenderResponse
	53, // 109: mobilecoind_api.MobilecoindAPI.GetTxStatusAsReceiver:output_type -> mobilecoind_api.GetTxStatusAsReceiverResponse
	55, // 110: mobilecoind_api.MobilecoindAPI.GetProcessedBlock:output_type -> mobilecoind_api.GetProcessedBlockResponse
	57, // 111: mobilecoind_api.MobilecoindAPI.GetBlockIndexByTxPubKey:output_type -> mobilecoind_api.GetBlockIndexByTxPubKeyResponse
	59, // 112: mobilecoind_api.MobilecoindAPI.GetBalance:output_type -> mobilecoind_api.GetBalanceResponse
	61, // 113: mobilecoind_api.MobilecoindAPI.SendPayment:output_type -> mobilecoind_api.SendPaymentResponse
	61, // 114: mobilecoind_api.MobilecoindAPI.PayAddressCode:output_type -> mobilecoind_api.SendPaymentResponse
	63, // 115: mobilecoind_api.MobilecoindAPI.GetNetworkStatus:output_type -> mobilecoind_api.GetNetworkStatusResponse
	86, // [86:116] is the sub-list for method output_type
	56, // [56:86] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_mobilecoind_api_proto_init() }
func file_mobilecoind_api_proto_init() {
	if File_mobilecoind_api_proto != nil {
		return
	}
	file_external_proto_init()
	file_blockchain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mobilecoind_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnspentTxOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenderTxReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverTxReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessedTxOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonitorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonitorStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonitorStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnspentTxOutListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnspentTxOutListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateEntropyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseRequestCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseRequestCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequestCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequestCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTransferCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTransferCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseAddressCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseAddressCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOptimizationTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOptimizationTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTransferCodeTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTransferCodeTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTxFromTxOutListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTxFromTxOutListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLedgerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveBlockSignatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxStatusAsSenderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxStatusAsSenderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxStatusAsReceiverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxStatusAsReceiverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessedBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessedBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockIndexByTxPubKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockIndexByTxPubKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayAddressCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mobilecoind_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mobilecoind_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mobilecoind_api_proto_goTypes,
		DependencyIndexes: file_mobilecoind_api_proto_depIdxs,
		EnumInfos:         file_mobilecoind_api_proto_enumTypes,
		MessageInfos:      file_mobilecoind_api_proto_msgTypes,
	}.Build()
	File_mobilecoind_api_proto = out.File
	file_mobilecoind_api_proto_rawDesc = nil
	file_mobilecoind_api_proto_goTypes = nil
	file_mobilecoind_api_proto_depIdxs = nil
}
